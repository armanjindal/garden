{"/":{"title":"🪴 Arman's Wild, Open Source Garden","content":"\nWelcome, to my garden!  👋  \n\nYes, a garden, not a blog. You can read about the many differences [here](https://joelhooks.com/digital-garden). \n\nI chose this metaphor for my digital home because of the garden's primordial association as a place of *creation*. [Language Matters](digital-garden/Language%20Matters.md), and here I think of each piece of writing as a plant. You will find plants at all stages in this garden. From rough outlines to polished pieces, I hope you enjoy them, but know that most are saplings, and most will die. This is good. Death is a necessary part of creation. I am constantly testing theory against reality, unafraid to modify or even outright destroy ideas that don't lead to life. A few worthy \"plants,\" under the nourishment of rain and sunshine that withstand the test of open, might flourish into solid oaks: ones that ground me in this crazy, incredible world. \n\nThrough consistent gardening, I hope to bring to life my nook on the internet. Since, as poignantly expressed in the final line [Voltaire's *Candide: ou l'Optimisme*](https://www.theschooloflife.com/article/cultivate-own-garden-voltaire/)\n\n\u003e  We must cultivate our own garden (\"Il faut cultiver notre jardin.\")\n\n\nThis isn't just a garden, though. It's a *wild* garden.\n\nConnecting each plant is a [rhizome](https://www.iaacblog.com/programs/rhizome-deleuze-guattari/#:~:text=Rhizome%20is%20a%20philosophical%20term,They%20are%20dispersed.): a mass of underground roots that with each plant grows, fertilizing the soil for the next plant, which may pop up unpredictably. In a nicely categorized world, I want to find connections. \n\nTo support this lofty goal, I chose an opinionated, open-source tech stack for my rhizomatic garden. I use [Obsidian](https://obsidian.md/) to write — an open source, knowledge management text editor with a graph view (bottom left) — embbed in [Quartz](https://quartz.jzhao.xyz/) as a site generation, managed on GitHub. These tools help conceptualize my works as an expanding network of connections rather than isolated writings. All of which ultimately help me to shape, affirm and faithfully **live** a narrative of my creation.\n\nHere are some of the starting points in my writing, but please peruse as you would a garden ☀️\n- [Techne](https://en.wikipedia.org/wiki/Techne)\n\t- [The Political Programming - From Walter Benjamin's Theory of Art \u0026 Artist](digital-garden/The-Political-Programmer.md) \n\t- [Beyond Form and Content - Sontag's Against Interpretation](digital-garden/Beyond-Form-Content.md)\n\n- Religion, Philosophy \u0026 Mysticism\n\t- [The Physical World in Ibn Tufayl's Philosophical Tale](digital-garden/Tools/Ibn-Tufayl.md)\n\n- Language, Cognition \u0026 (Non)Self\n\t- [Language Matters!](digital-garden/Language%20Matters.md)\n\t\t- [Find Rhythm. Not Momentum](digital-garden/Rhythm-Not-Momentum.md)\n\n- [Living Book Commentaries](digital-garden/Book%20Commentaries/Book%20Commentaries.md)\n\t- [4000 Weeks - Time Management For Mortals](digital-garden/Book%20Commentaries/4000%20Weeks%20-%20Time%20Management%20For%20Mortals.md)\n\t- [Non Violent Communication - A Language of Life](digital-garden/Book%20Commentaries/Non%20Violent%20Communication%20-%20A%20Language%20of%20Life.md)\n\n\n## Community \nAlthough I maintain this garden, I hope to cultivate a community that enjoys browsing and adds to its \"life.\"  To do this, I will use [GitHub](https://github.com/armanjindal/armanjindal.github.io), which enables large-scale collaboration on software. Except I am going to use to write. \n\nRight now, there are two ways:\n1. Feedback. To merge a development branch into the main branch, you often need to review the code. I think this functionality would work perfectly for writing. This has an added benefit that the hard work of the people who comment is transparently and immutably documented. \n2. [Issues](https://github.com/armanjindal/armanjindal.github.io/issues). On the `Issues` tab of the GitHub repository on this site, I hope to scope/outline the writing I hope to publish. This is a great place to collect feedback (before I've even started to write), scope projects, track progress, document, and prioritize a million things I want to write. \n3. (TO COME) Milestones and corresponding branches to allow multiple projects to be developed in parallel. \n\nRight now, I expect it will be friends and mentors who I will pester to contribute, but I hope to have a broader audience of contributors as this grows. GitHub is immensely powerful, and I will try to use it best to \"cultivate my garden\" best I can. 🪴\n\n\n#  Me\nMy name is Arman Jindal. I am currently a student at Columbia University, studying a joint program in Computer Science \u0026 Philosophy. I designed it around the question of [[Knowledge and Computation]]. \n\nI'm working as a part-time software engineer and technical writer for an open-source, Berlin-based start-up called Airy and as a peer fellow for the Columbia Writing Center. ","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/Rules-for-Living":{"title":"","content":"\nI've had a fraught relationship with rules. Please interpret them as MY rules for MY life. As \n\n\u003e \"I trust that none will _stretch the seams_ in putting on the _coat_, for it may do good service to him whom it fits.\"\n\n- Leave your phone at home. \n\t- ","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Beyond-Form-Content":{"title":"Beyond From and Content: Sontag's Against Interpretation","content":"\nThe title of Sontag’s essay *Against Interpretation* stakes its central claim quite clearly. Sontag attacks a contemporary practice of interpretation that reduces and “tames” the artwork it interprets. The contemporary institution of interpretation breaks down art into neat, “manageable” pieces that fit an ideology such as “Marxism”, ”Freudianism”, “Aristotelianism ”,  (insert your  -ism of choice), etc. She claims this practice is caused by a misguided focus on the content over the form. In this essay, I argue that an epistemic bias toward reason over sense experience is more foundational. This bias not only explains why “this philistinism of interpretation is more rife in literature than in any other art”  but also elucidates her excited positive concept of interpretation: an “erotics of art.” \n  \nSontag begins by historicizing and criticizing the “rules” of modern interpretation. She is not against all interpretations, as the title may suggest, but specifically, the modern kind that  aggressively “tames” the work it interprets. She claims “the contemporary zeal, for the project of interpretation is often prompted [...] by an open aggressiveness and contempt for appearances. The old style of interpretation was insistent but respectful[..]. The modern style of interpretation excavates, and as it excavates, destroys: it digs “behind” the text, to find a sub-text which is the true one.” Sontag’s use of the phrase “contempt for appearances” evokes the appearance/reality distinction from Greek antiquity, from Plato, that echoes through the Western canon. This distinction privileges reason as a tool for gaining “knowledge” of the world. According to this epistemological bias, senses experience, is deceptive because it can only show us mere appearances. For the rationalist, we can only access “true” reality through reason. Sontag criticizes this epistemological bias that has been smuggled into the interpretation of art. This “contempt for appearance” leads to the destruction of works by interpretation. Sontag's diction “excavation” and “dig” not only connotes destructive and aggressiveness but once again invokes the Platonic image of the Cave, and the appearance/reality so famously associated with it. Modern interpreters, no longer inhibited by authorial intent,  are happy to “dig behind” the text to fit the literature into their preferred idealogy. Sontag inverts the allegory of the Cave. Excessive reason chain art to the walls of the cave. Embedded in this criticism is the claim that we must elevate sense experience over reason when interpreting art. \n\nModern interpreters destroy works, according to Sontag, because of a misguided focus on content  — a search for what the art says rather than a focus on form —  how an artwork appears. While I agree with this idea, the content/form distinction is insufficient and problematic in its own way. The form and content of an artwork are not always easy to separate nor, as I will later argue, should we even try to consider one without the other. Instead, our privileging of reason over sense experience leads us to focus on content because of a mistake idea of how the parts of an artwork relate to the whole. Sontag gestures to this issue in an example of poor interpretation. “Directed to art, interpretation means plucking a set of elements (the X, the Y, the Z, and so forth) from the whole work. The task of interpretation is virtually one of translation. The interpreter says, Look, don’t you see that X is really - or really means - A?[...]”(3) In this example of poor interpretation, two distinct processes are taking place. \n\n\n1. The breakdown of work into its parts of its content \n\n2. Ascribing the parts meanings that are latent/hidden \n\nThe second process, the attribution of hidden meanings is Sontag’s focus. It is the main thrust of her argument against interpretation. It is a translation that destroys the artwork. I agree, but explaining the first, more foundational, process namely that of breaking down an artwork, into its parts is the focus of this essay. It presents new philosophical problems: can we break down a work of art into its parts and recover the whole? If not, why? I claim, that the aesthetic use of language in literature cannot be broken down into its parts, analyzed as separate units, and built up to recover the whole. Once the language is used aesthetically, as in literature, the relationship of the parts to the whole changes. The power of this aesthetic use of language is in the immediate experience of the “whole” that is greater than the sum of parts. When language is used in a practical, non-literary context, the meaning of the whole is no more than the sum of its parts. The language used in everyday life often has to be broken down, analyzed sentence by sentence, and built back up. It is the confusion of these two distinct ways language is used that makes literature most susceptible to modern, aggressive interpretation. \n\nAlthough Sontag still relies on the content/form distinction, she does criticize mereological reductionism (the idea that the whole is no more or less than its parts) in art. She says, “Interpretation, based on the highly dubious theory that a work of art is composed of items of content, violates art.” In breaking down a piece of art into its constituent parts of the content we “violate” it. But breaking it down into its form alone would do the same. It is not content/form that is the issue but the idea that we can and should break down art. For example, reading a chapter-by-chapter summary of Don Quixote would take away its power and literary. But so too would an interpretation that just spoke of the form (if such a thing was even possible). Imagine reading an interpretation that does not include plot points of the hilarious (mis)adventures of Knight Errant and his squire. Content and form are inseparable. However, a bias to reason explains why content is overemphasized. To reason about a complex whole, is to break it down into its tangible parts (either content or form but more often content), to reconstruct the whole takes away the intangible but real power art has. To sensually experience artwork is to confront it in as a whole — content, and form in an instant. \n\nBringing the focus back to literature the theory I have developed help explain why Sontag sees literature as an art form that is most poorly interpreted. Literature, unlike visual arts is consumed gradually. A painting has a high sense of immediacy that gives the viewer an immediate sense of the whole, unlike a novel. But once you are in the grasp of a literary work (which can take time and many times never happens) you find yourself experiencing the artwork as you are reading. This experience does not come from any one sentence but arises from the whole experience of the work that is expanding as you read on. These two uses of language interact since you are reading sentence by sentence, but the aesthetic quality emerges from no one sentence but all those that you have encountered so far. Because of this low sense of immediacy and the dual function o language, it is no wonder literature is, according to Sontag, most often subjected to the “philistinism of interpretation.”  \n\nIn stark contrast to the artistic medium of  literature, Sontag points to the film as the “most alive,  the most exciting,  the most important of all art forms right now.” However, her explanation is unsatisfying as it relies exclusively on the content/form distinction. “ For the cinema, unlike the novel, possesses a  vocabulary of forms  -  the explicit, complex, and  discussable technology of camera movements, cutting, and composition of the frame that goes into the making of a film.” I do think there is an equally rich vocabulary of forms, from the crude ‘literary devices’ high schoolers are taught to mine to the subtler description of narrative frames and compositions. It is rather superficial to claim that all one needs to do is develop a richer vocabulary of forms, and then the good interpretation will follow. Sontag does think that it is as simple as that, and I think understanding the issue as more foundationally a bias toward reason and misguided mereology better explains why a film with its more sense immediacy is not *as* irresponsibly interpreted as literture.  \n\nIn light of the analysis conducted so far,  I now focus on her positive practice of interpretation, what she calls “criticism” or “erotics.” She says, “We must learn to see more, hear more, feel more [...] The function of criticism should be to show how it is what it is, even that it is what it is, rather than to show what it means. Sontag is appealing to the senses of sight and sound, as well as to the experience of our emotions. It is a clear call to use sense experience instead of more considered reason in the task of interpretation. To do this, we cannot approach art with contempt for appearance because the power of art lies in its appearance. This new mode of interpretation helps “reveal the sensuous surface of the art” instead of smothering it with hidden meanings. The positive interpretation project is about enhancing our sensory and emotional experience and communicating it in our interpretations. \n\nAt this point, one might worry that the emphasis on the sense experience of “wholes” allows for crass relativism. That Sontag is open invitation for the affective fallacy in the interpretation of art. But in our experience of art, we are seldom the only ones to experience something. This plurality of feeling different people have when experiencing the same art can form a range of acceptable interpretations. These collective subjective experiences make the tasks of interpretation all the more fascinating. We can now evaluate an interpretation based on our experience of the works. If our artistic senses are attuned to what the interpreter tries to illuminate, they have succeeded in enhancing our experience of the work.  Therefore a better interpretation vs. a poor one comes to the ability of the interpreter to make those attune to the experience of the sensual surface of the work they are interpreting. Opening up interpretation to an “erotics” by appealing to sense experience does increase the risk of relativism but does not necessarily have to lead to it. Sontag seems to gesture at a multiplicity of perspectives that can be evaluated, not objectively but collectively, on this idea that to “reveal” an artwork is better than to “tame” it. \n\nSontag’s criticism of the modern practice of interpretation illuminates foundational bias that has been smuggled into the practice that “violate art.” Through her analysis of what is lost in art and literature in this “aggressive” misguided form of interpretation, I have argued that the content/form distinction is the product of the more foundational reason/sense experience bias.  This foundational bias reason uses content as the most obvious part and proceeds to break down an artwork into “maangable” pieces to find its hidden meaning. It is this process of breaking down art that most “violates it.”  From this framework, Sontag’s positive project of interpretation can be better understood. Only our immediate, sensory experience lends itself to fully capturing the effect of the parts working together as a whole.  In the case of literature, the constituent parts, namely language, cannot be broken down and analyzed as units as it is in everyday use. This dial function of language, as well as the low immediacy of the medium, are what make literature, more so than other art forms, more likely to be misread. By clarifying and recasting Sontag's argument in these terms, the positive project becomes more apparent. I hope that all readers and interpreters can actively build an institution of interpretation that celebrates the whole work— all its beauty, power, and perhaps most importantly, ability to “make us nervous” — rather than to “tame” into its parts.**","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Book-Commentaries/4000-Weeks-Time-Management-For-Mortals":{"title":"4000 Weeks: Time Management For Mortals","content":"My tongue-in-cheek one-liner for this book is the \"anti-productivity anti-self-help productivity self-help book\" we all need. [Oliver Burkeman] does so well, bringing ancient and philosophical ideas into an area we must think more deeply about in our time. He does it in a way that is useful and accessible.  This book touches on many disparate intuitions and bits of wisdom in an organized, coherent way. Reading, listening and re-reading this book has tangibly improved my life and happiness in ways that I will try to capture here. The prose is straightforward in a sobering way but entertaining way. Burkeman's stakes here are quite literally life and death. \n\nThe Efficiency Trap:\n- The more (unquestioningly) efficient you become, the more likely you are to take on the tasks that others ask of you to make their lives easier rather than enrich your life. \n- WHY?\n\t- Because the optimal time management strategy **promises** that you will take on more of these commitments.\n\t- It's a delusional escape from the constraints of your time and energy. \n\t- We much rather think this than confront the harsh and brutal indifferent limits of our existence. \n\n\"The more wonderful experiences you succeed in having, the more additional experiences you feel like you *could have* or *ought to have* on top of all the experiences you already have.\"","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Book-Commentaries/Book-Commentaries":{"title":"Living Book Commentaries","content":"We've all been told and, in turn, tell ourselves to \"read more.\" I'm skeptical. \n\nI've met people who have (claimed to) read everything. They've got long Goodreads lists to back it up. I'm a little jealous. But like most of my \"inadequacies,\" I've found that I am grateful that I am not one of these people.  While I've been tempted to create a list of what I've read \n\nWhen reading becomes **too** instrumental, books become checkboxes. Reading becomes stultifying. \n\nAuthors' names become black box elusive figures of \"authority\" and most perniciously intellectual crutches. \n\nIf books are magical (which I very much). You can communicate with the past and glimpse a life and inner world that was lived. I read because it makes me more alive, and it connects me to the world differently. \n\nBooks are not bounded by the author's intention. To some, this is the first step into crass interpretive relativism. Instead, I see this freedom. Books, like \"history,\" are tools we can marshall to create life and society — not trophies on a wall. There are a few books that are alive with me. I've found myself coming back to, rethinking, and re-reading. I want to capture that process here. This is why I've created this page with a few books I want to carry with me. \n\n* [[digital-garden/Book Commentaries/4000 Weeks - Time Management For Mortals]]\n* [[digital-garden/Book Commentaries/Non Violent Communication - A Language of Life]]\n\n\n\n## Reading \n\nIf you are comfortable reading something once, you probably read for \"information\". Reading for \"understanding\" is reading up. These are the books that you didn't get on the first go. Books that made you question your ability to comprehend words on a page. Books you have to keep coming back to. Books which you've only read once and you know you grasped, at best, the most surface levels. The [[Columbia Core]] is an excellent selection of these books. Now can you continue to read these books outside of college? I don't know. People certainly have, and I would like to \n\nWe can only truly read few books. Our \"understanding\" especailly of great books  them is con s","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Book-Commentaries/Non-Violent-Communication-A-Language-of-Life":{"title":"Non-Violent Communication: A Language of Life","content":"\n\n- [Expressing and Recieving Gratitude](https://www.youtube.com/watch?v=DskpPwkE_yw)\n\t- Expressing:\n\t\t- \"You are brilliant\" - there is no information here. On the contrary, being told what you are is dangerous. Its a reductive box that does not help you recognize the \n\t\t- Giving gratitude:\n\t\t\t- 1. Bring to the person's attention **concretely** what they did, that that **made life more wonderful** \n\t\t\t- 2. Say what you *feel* at the moment that the person did that thing. \n\t\t\t- 3. Say what *need* is another person's \n\t- i.e When you said these two things, \n- Recieving:\n\t- For some (Jackals) nothing is more scary to them than honest and sincere appreciation\n\t- Why? \n\t\t- A narrative of \"deserving\" - this is a dangerous concept\n\t\t- A need for \"humility\" (but not a good kind)\n\t\t\t- \"Don't be so humble. You are not that great.\"\n\t- \"It is our light, not our darkness that scares us the most.\" We have an enormous power to \n- Make sure it is coming from the HEART to CELEBRATE. Never to praise, complement or reward.","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Document-Driven-Development":{"title":"","content":"\nhttps://tom.preston-werner.com/2010/08/23/readme-driven-development.html\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Helm/Helm":{"title":"","content":"\nSource: [A Beginner's Guide to Helm](https://www.youtube.com/watch?v=5_J7RWLLVeQ)\n\n- Helm is a package manager for Kubernetes.\n- Why is it useful? \n\t- Kubernetes is declarative. We tell it what we want, and Kubernetes makes it happen. \n\t- Checks that the desired state (defined by many `YAML` files) matches the current state.\n\t- We often have many files like `deployment.yaml` , `configmaps.yaml`,`persistmentVolume.yaml`, `secrets.yaml` for a single application). \n\t- These files are not dependent, hard to maintain, and cannot easily be reproduced. \n- Helm groups the YAML files needed to deploy an app:\n\t- Turn them into templates `templates` directory.\n\t-  akes injecting values into these templates easier.\n- It brings all of these yaml files","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Language-Matters":{"title":"Language Matters","content":"\nBecause it does, and my dear friend [Isabelle Pride]() says so. Jokes. \n\nBut it does. Most fundamentally. Language is at the core of how we construct reality. \n\nI don't have a coherent theory of cognition and language, and there is plenty of crazy dense philosophical and psychological work on this topic. I am not going to summarize it or even explain it. My goal here is to make a case for its **importance.** My main argument - try it. \n\nT\n\nLanguage impacts cognition. Certain words trigger categories of related and different ideas, images, and memories. Cognition is how we construct the world. Language then is one of the base constituents of reality.\n\nSo let's pay attention to what words and metaphors we use. They shape our world and are the \"limits\" of it. They often illustrate the boundaries. This is a truth that I've come to \n\n\n\nSo I've decided to document every time in my life, that this hard-earned and often overlookedob truth has mattered. \n\n- After a month and a half interning at Airy.co, \n- I saw a transformation in my language. As I moved from outside to become a part of the organization and was involved in more design decisions.  an insider in the ","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Rhythm-Not-Momentum":{"title":"Find Rhythm. Not Momentum","content":"\u003e [!quote] Definition - Momentum\n\u003e \n\u003e /mə(ʊ)ˈmɛntəm/ \n\u003e noun: **momentum**; plural noun: **momenta**\n\u003e 1. PHYSICS. \n\u003e the quantity of motion of a moving body, measured as a product of its mass and velocity.\n\u003e 2. the impetus gained by a moving object. \n\u003e \"the vehicle gained momentum as the road dipped\"\n\u003e — [Oxford Language](https://www.google.com/search?q=definition+of+momentum\u0026oq=definition+of+momentum\u0026aqs=chrome..69i57j0i19l4j69i61l3.3169j0j7\u0026sourceid=chrome\u0026ie=UTF-8)\n\nMomentum measures how hard it is to stop something once it is in motion. The metaphor of momentum is used (and abused!) everywhere, from sports and entrepreneurship to working out and relationships. Momentum is one of those metaphors that has gone from a descriptive physical quantity to a constructive mental model of the world. \n\nI've always had a love/hate relationship with momentum. I'm sure I am not alone since momentum can work for you as much as it can against you. To quote a Nike commercial that used to be my alarm clock at a particularly \"grind-set\" point in my life - [\"momentum is a cruel mistress. It will turn on you in a dime\"](https://www.youtube.com/watch?v=OmkNKEHC8Pg). \n\nWhen you've got \"momentum,\" you feel invincible. The \"weight\" of the previous productive days or previous workouts helps \"push\" you through the one in front of you. The feeling of momentum often comes with improvement. Don't break the streak is a powerful motivator. \n\nMomentum can also be exceptionally cruel. Because eventually, life happens. A family trip \"gets in the way\" of your workout program. You've had a massive cheat meal on a night out with friends. You've lost momentum. All the \"weight\" you once had working for you is now gone. You must work hard to build this momentum again. I've always felt that  As a former elite junior athlete and presently highly ambitious person, this feeling of guilt and failure is a destructive, unproductive spiral I've felt many times. \n\n\"Momentum\" evokes the image of a rock rolling down the mountain. It **requires immense effort** to begin, but once it rolls, you better get out of the way. As the boulder tumbles down the mountain, it's got **direction**.  Momentum is a vector, which means it has a magnitude as well as direction. It is always \"going\" somewhere.\n\nNow, metaphors are never perfect. But I've got a better one. *Rhythm*. \n\nEveryone needs to find their own, and this can change with time. Losing your rhythm isn't quite the same as breaking your momentum. You can recover it as quickly as you lost it. When you are \"in\" a rhythm, it becomes easier to stay in it. So it captures the same benefits of consistency, but unlike momentum (which goes to 0 the moment you stop), rhythm has a funny way of getting into your bones. \n\n\"Rhythm\" evokes the image of dance. This brings me to my favorite part about this metaphor. Rhythm makes space for others. The right partner brings another \"rhythm\" to your life. One that changes yours enough but lets you keep dancing. When your rhythms sync up, they interact constructively. You can do things together you couldn't alone. More generally, unlike the solitary rock tumbling down the mountain, your social relations are not \"in your way,\" but the right ones expand what is possible. \n\nWith \"rhythm,\" you don't **have** to be going somewhere. Finding a rhythm, a cadence can seriously help (think rowing), but ultimately your important habits are decisions about how you want to be in the world. Your identity. \n\nSure, you can build \"momentum\" for a habit of workout out if you want to look great without your shirt off in the summer, but this is different if you have a life-long commitment to caring for and experiencing the full extent of your physicality. The latter is an outcome-based goal rather than an identity one. In this case, you want to change your rhythm - you want to change you. \n\nFinally, the metaphor captures the dynamism of being. Rather than conceptualizing ourselves as static entities with singular directions (rock with momentum), we choose a metaphor that celebrates our constant movement - influenced by the people and situations we bring into our lives. \n\nThis is why I will say, when I'm feeling a tailwind wind, I've found a \"rhythm\" - not that I got \"momentum. \"\n\nWhy? Because [Language Matters](digital-garden/Language%20Matters.md)","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/The-Political-Programmer":{"title":"The Political Programmer","content":"  **Open Source and Big Tech **- *An analysis based on Walter Benjamin's Political Theory of Art and Artist*\n  \n\u003e[!Note]\n\u003e This is a work in progress. I am actively and substantially revising the argument and the structure. But if you have any suggestions or thoughts, please [email me](mailto:arman.jindal@columbia.edu). Even better, [create an issue](https://github.com/armanjindal/armanjindal.github.io/issues/new?assignees=\u0026labels=\u0026template=suggestions_report.md\u0026title=) on GitHub of this repository. \n \n\n\n***Tech for good*.** You'll see it on shirts, on LinkedIn headlines, and on social media.  At first sight, it struck me as another banal, virtue-signaling slogan. I thought the classifying tech was relatively straightforward. I was wrong. \n\nBecause intentions (un)fortunately don't count. Gene editing is a technology that could save us from world hunger or be used to manufacture deadly viruses. It will likely be used for both ends. Today's most important technologies — flight, radio, the computer, the internet — began as military projects intended to coordinate killing others effectively. No matter how good or bad technology may seem or the purity of its creator's intention, we can never be sure of its impact on society. This might sound theoretical or historical, but for engineers and technologists who see themselves as powerful and their work as political (both are true, as I will argue), nothing is more practical than the questions of what to build and what not to. \n\nMy goal with this (philosophical) op-ed is to outline a framework for the political programmer to approach that question. This is not just for programmers. Everyone's life is mediated by technology, and who, how, and what influences its development impacts everyone. \n\nI will not try to answer if technology is \"good\" or \"bad.\" I will side-step it entirely. Instead, I begin this lofty project by looking closely at how a piece of technology is made — its \"technique.\" This general lens and particular terms come from a seemingly unlikely source: a WWII political theorist of art Walter Benjamin. According to Benjamin, an artwork's \"technique\" is inextricably linked to its social, economic, political, and material conditions of production. There is a rich parallel to draw between the 21st-century programmer and the 20th-century artist.  Using Benjamin's essay [\"The Author as Producer\"](https://yaleunion.org/wp-content/uploads/2013/12/Walter_Benjamin_-_The_Author_as_Producer.pdf) I reconstruct some of his critical ideas on the political nature of the artist and apply them to the modern programmer. Specifically, I conceptualize 'Big Tech' and 'Open Source' as \"techniques\" for producing technology and then analyze their impact. This forms the basis of the political programmer. To begin, I will define my terms. Staring with an what I've referred to as the \"political\" dimension of a programmer\n\n## Inescapably Political:  Art \u0026 Technology\n\nTechnology and art are often described as magic. All magic is political. \n\n- Writing and living during WWII, Walter Benjamin witnessed Nazi Germany and Fascist Italy weaponize art. Art, \"aesthetics,\" more broadly, was used to manufacture a society willing to endure brutal means for glorified and beautiful ends. \n- However, just as art could be used for oppressive and genocidal ends, Benjamin saw the blank canvas as a place to imagine new and better societies. In the revolutionary context of late 19th and early 20th century Europe, where questions of how to govern a society was reignited with the emergence of Marxism, art was the medium to collectivley imagine and eventually create a society human flourishing that had never existed before.\n- Art has always been a powerful force. The towering churches across Europe and the near monopoly the Church had over art production affirmed its \"divine\" authority of God. \n- However in Benjamin's time conditions of art changed. \n- Technology, such as photography, radio, film and the newspaper changed the\"art.\"  Not only expanding its consumption to the masses, but changed what was made. \n- As such, Benjamin  takes a *materialist* approach to his political analysis of art. Instead of focusing on the content or form of the artwork, or the \"ideas\" around art, he examins the art in the social, political and technological conditions within which it is produced. Specifically, in the context of capitalism, he ask the deeply relevant question we grapple with today: can art truly change a society that enables its production.\n\n## Definition of the Programmer \nBefore I lay out that theory, I want to discuss the definition of a programmer. As the title suggests, I’ve defined the programmer as the producer of technology. But who gets to produce technology?   \n\nIn Author as Producer (1934), Benjamin proclaims that amidst technological innovation and new political demands, we must expand our old \"notions of literary form\" and “authorship” to find new \"forms appropriate to the literary energy of our time.\" Today, I argue, we must similarly expand our notion of a programmer. Not merely because of new technology but because our fundamental relationship with technology is changing. Now more than ever, and at an increasing rate, we are creating technology — not just using it.  \n\nWith the rise of Personal Computers, the proliferation of software and the internet, accessibility of information, and greater intimacy with digital tools, these new material conditions of innovation have dramatically changed our relationship with technology: from user to the producer. This change is still underway, but the rise of  '[power-users](https://www.urbandictionary.com/define.php?term=Power%20user)' — users who customize their technology for a specific use — clearly demonstrates that the line between user and producer is blurring. TikTok and Instagram users build custom filters; graphic designers and music producers regularly extend and connect the digital tools that make their work possible. These power-users, who are often artists but range from productivity nerds to gardening hobbyists, are for the first time becoming the producers of the technology they use. This trend is most visible in software but is not limited to it. Affordable micro-controllers like the Arduino and RaspberryPi make bringing code into the physical world more straightforward [than ever](https://www.youtube.com/watch?v=LCcO-6lb9zM\u0026t=38s). Though there are very real and pressing inequalities in access to technology and education, it is theoretically possible to modify and shape technology like never before. We can all produce technology and, therefore, all become programmers. I believe realizing this theoretical possibility is immensely emancipatory. The professional programmer, who epitomizes the producer's relationship with technology, much like the artist, has an essential role in determining if we do or not. So my analysis will focus on the professional, but the implication extends far beyond. \n\n\n## Literary Technique  \nBenjamin begins Author as Producer by criticizing the common debate between a literary work's political commitment, its “tendency,” and its literary “quality.”  On the one hand, work with a ‘good’ political commitment but of ‘poor’ quality is clearly not great. But on the other hand, what about work with a terrible “tendency” of high artistic “quality?” [Triumph of the Will,](https://en.wikipedia.org/wiki/Triumph_of_the_Will) the infamous Nazi propaganda film is a typical provocative example of these kinds of works. Can a work that tries to bring about a ‘bad’ political end be truly great? The debate rages on, even today. Benjamin believes that “tendency\" and \"quality\" are superficial, dead-end concepts. He writes, “[y]ou are familiar with it, [‘tendency’ vs. ‘quality’,] and so you know how unfruitful the debate has been. For the fact is that this debate has never got beyond a boring ‘on-the-one-hand’, ‘on-the-other-hand’[...].” Instead of asking about a work’s tendency, which is seldom straightforward except in the most extreme cases, Benjamin introduces the concept of technique by asking a different question. \"Before I ask what is a work's position vis-à-vis the production relations of its time, I should like to ask: what is its position within them? This question concerns the function of a work within the literary production of its time. In other words, it is directly concerned with literary technique.\" (Benjamin, pg 87). Benjamin shits the focus of criticism from a work's political ends to its position within the “living and breathing production relation.” Not to ask what it says, but instead what it does. To answer the latter question, particularly for a Marxist, we must look at how it was produced  — its “technique.” Only when it is considered in these dynamic material terms can we understand the unique, self-referential power art has to change the society that enabled its production. \n\nThis question is not limited to criticism of capitalism (produced under/using it) but extends to any work that hopes to change society. For example, the Netflix “documentary”  The Social Dilemma, is promoted on social media, using the same unethical and user-privacy abusing algorithms it attacks. Banksy’s artwork, critical of the obscene pricing of art and authority of art institutions, sells for millions at auction houses (three times as much when [half-shredded](https://www.npr.org/2021/09/07/1034962331/banksy-shredder-girl-with-balloon-love-is-in-the-bin-auction-sothebys)!). Benjamin poses a subtler question: can art change its conditions of production, or is it condemned to reproducing them, try as they might? Benjamin believes art can, but we must look to the material “technique” to understand how.\n\n\nTechnique is a philosophically loaded term Benjamin uses extensively throughout his work. Broadly defined as “the medium through which we humans [...] [shape the world](https://journals.openedition.org/am/944),” technique includes tools and how we use them — technology and the social relations of prodcution — but also how those tools shape us. Technique, according to Benjamin, “makes literary products accessible to immediate social, and therefore materialist, analysis. At the same time, the concept of technique represents the dialectical starting-point from which the sterile dichotomy of form and content can be surmounted.\" (Benjamin, pg 88).  The dichotomy is \"surmounted\" because \"technique\" considers how content, form, art, and artist are inextricably linked by the material conditions. Just as the editing tools of Photoshop and the distribution platform of Instagram, for example, influence form, so too do economic and societal norms on what users engage with influence the content. He calls the concept a “dialectical starting point” since it gets us beyond the limited “on-the-one-hand, on the other-hand-debate” to a more productive one centered on “technique.” This focus helps us answer the question of a work's “function.”\n\n  \n Benjamin redefines ‘tendency’ in terms of progressive or regressive technique.  The former improves conditions and the latter re-enforces conditions of production. Benjamin writes, “[w]e can now affirm more precisely that literary tendency may consist in a progressive development of literary technique, or in a regressive one.\"  The question for the critic is now no longer if a work has the right content or form but instead if it brings about a progressive or regressive technique. For example, a work whose content might be critical of capitalism but whose technique only strengthens its production relations falls short. Whereas a work whose content might, somehow, affirm its conditions but its technique somehow subverts them, it can (in theory) be emancipatory. So now the question is: what makes a technique progressive or regressive? The final part of this op-ed focuses on this question, but we now have enough Benjamin to shift the focus onto the programmer and technology. After which returning to this question becomes more productive. True to Benjamin's materialist approach, I start with how technology is produced — its means of production.\n\n## Open Source Vs Big Tech \nOpen Source and Big Tech are the dominant ways programmers produce modern-day technology.  Big Tech is a conventional capitalist means of production, whereas Open Source is a unique means of production with four distinctive characteristics: \n\n1. Code is written by (historically) unpaid programmers \n2. Collaboration is enabled through the internet using a transparent version control protocol ([Git](https://git-scm.com/)) hosted, most popularly, on [GitHub](https://github.com/)\n3. No one owns the code — anyone can distribute, use, clone(fork), and modify it\n4. Open Source is community-driven and strives to make adding to the project's code as accessible as possible through documentation and educational resources. \n\nI define Big Tech and Open Source (with capitalization) as a theoretical set of practices, ideas, and producer relations. Anyone who has experience with real open source projects knows many fall short on one or more of the characteristics listed above. Still, the incredible success and unquantifiable value of technology produced in this way, most notably the [Linux Operating System](https://www.youtube.com/watch?v=vjMZssWMweA), make its unique characteristics worthy of independent, theoretical analysis. \n\nOpen Source was once the dominant way all software was produced, but it solidified as a counterculture in the late '70s and early '80s when programmer hobbyists were frustrated that they could not view, fix bugs, or modify Big Tech’s closed, proprietary software. They saw Big Tech companies such as Windows and IBM who profited from proprietary software as betraying the open culture of sharing that characterized early software and the internet.  In contrast, Big Tech is a method of producing technology where programmers are paid in exchange for writing code, and the surplus-value of their labor goes to shareholders of the company. This code cannot be viewed, modified, or freely distributed. In the early 90’s Big Tech demonstrated that proprietary software could be immensely profitable since software could be resold for zero marginal cost. Between 1995 and 2000 there was a rush of speculative investment that eventually led to the crash known as the [dot com bubble](https://en.wikipedia.org/wiki/Dot-com_bubble). Markets soon stablized; capital and Big Tech have since been entwined. The Big Tech means of producing technology has come to be the standard. Open Source on the other hand has plugged in relative obscurity.  With minimal capital, open source communities have managed to create immense value by building critical infrastructure tools — such as programming language, operating systems, databases, etc. However, Open Source is resurging today, and capital is beginning to enter it as companies demonstrate that profit is still possible, and in some cases, more likely, with an open source codebase. This rise of Open Source is immensely exciting, and has, as I will argue, immense emancipatory potential, which lies in its progressive technique. \n\n\nThe technique of Open Source is progressive since it empowers users by turning them from isolated passive individuals into a community of active technology producers. Open Source, by its nature, is has an existential need for collaboration and community.  If it is too difficult to use, or to contribute to the project dies by neglect —the fate of 99.9% of open source projects. As such this existential need for community impacts everything from the kind of programmers it attracts to the quality of the code; from the tech stack used and its architecture to the tutorials and documentation on using it. Making the technology understandable and possible to contribute to impacts everything about the creation process, and what even gets made. By recruiting its users to producers Open Source does what Benjamin praises the Soviet press for; it weakens the distinction between reader and author. In Benjamin's analogous analysis of the newspaper, he writes:\n\n\n\"For as literature gains in breadth what it loses in depth, so the distinction between author and public, which the bourgeois press maintains by artificial means, is beginning to disappear in the Soviet press. [...] The vast melting-down process of which I spoke [...] questions even the separation between author and reader. The press is the most decisive point of reference for this process [...]\" For, as we know, the newspaper in Western Europe does not yet represent a valid instrument of production in the writer's hands. It still belongs to capital.\" (Benjamin, pg 90) \n\n\nThe Soviet press, which Benjamin saw as filled with emancipatory promise, enabled the worker to go from a passive reader to an active writer. The technique of its production empowered the proletariat as a community to shape the forces that shaped them. Uncannily, Open Source does the same. It bonds users and producers together, through forums and discussion boards to collectively shape the technology that shapes them. These active developer communities — armies of volunteer contributors — who flag bugs, test features, write documentation, and build useful features are the envy of Big Tech companies. \n\n  \n\nIn contrast, Big Tech is analogous to the newspaper of Western Europe, which works to maintain the distinction between user and producer through \"artificial means.\" Most obviously, by not sharing the source code, but more perniciously, through its technique. Since the public does not see the code, it is notoriously poorly documented, hard to understand, and idiosyncratic to the point of incomprehensibility to those outside the company. Big Tech overspecializes its programmers, and its long onboarding practices are evidence of its incomprehensibility. It trains programmers to operate on a narrow scope, and most importantly, does not cultivate the ability to communicate their contributions to outsiders of the organization. Combined with exclusionary hiring practices, often from feeder schools such as Columbia, MIT, and Harvard,  Big Tech selects and trains a politically impotent programmer.  Programmer are alienated from the technology they produce (in a codebase of millions of lines, individuals cannot see their contribution to the whole) and they lack the power to build in other collaborative, non-Big Tech, settings. In stark opposition to Open Source, the technique creates the pressure for obscurity rather than transparency. Under these conditions we have the most problematic and irresponsible uses of technology, which perpetuate social inequality and alienation. \n\n  \n\nAt this point, many might contest the definition of Open Source and Big Tech, as well as generality of the claims I have made about their respective techniques. On the former objection, they contest that the neat, theoretical distinction doesn’t exist. This is absolutely correct. In reality, all technology is produced on a spectrum between Big Tech and Open Source. Some companies with open codebases might be using the technique of Big Tech, and similarly Big Tech companies, despite the provocative name, might practice the Open Source technique. \n\n  \n\nDespite this complex reality I have hoped to theoretically distinguish between the two to arrive at \n\n  \n\n and idealizing the distinctive aspects it has allowed me to analyze the technique substantially.  This is helpful because although the relationship began antagonistically,  they are now interacting in exciting and troubling ways. Open Source projects are turning into large companies backed by (venture) capital. On the other hand, paradigmatic Big Tech companies such as Google and Microsoft are open-sourcing (yes, it is a verb) internal tools and code which generally would have remained closed. It is precisely these mixed cases that have motivated this op-ed, and where a discerning, theoretical discussion of their technique, rooted in Benjamin’s analysis of the Soviet Press and of Western Europe, is helpful. \n\n  \n\nOn the latter objection, namely of the overstated impact of technique on the programmer, I am not saying all programmers become like this. Many of the best and most politically potent programmers in the world work at paradigmatic Big Tech companies. But I am claiming that they likely have resisted the incentives and pressures of conditions which are not conducive to developing that potency. Conversely, working on Open Source does not guarantee potency, but it makes it more likely. \n\n  \n\nSo far, I have argued that the technique of Open Source is progressive and therefore, emancipatory because it, unlike its counterpoint, works to empower its users to producers. Does this remain even when capital enters into it? Yes. While Big Tech “belongs to capital” Open Source uses it. It uses capital in a way that questions the very production relations of conventional capitalism. It also allows technology to be shaped by humans for humans, not by humans for capital. Open Source accomplishes these lofty claims in a number of ways which, in concert, gradually becomes increasingly emancipatory. There is far too much to discuss here, so I  will focus on three.\n\n  \n\nFirst, it questions traditional producer relations and shallow theories of why we work. The success of Open Source is mind-blowing and complicates the (simplistic/Smithian) conventional capitalist theory of labor. The most crucial technologies upon which the internet and trillions of dollars of economic activity have been made are built by communities of programmer hobbyists, self-organizing, and working for free. Big Tech relies on and re-enforces the idea that workers work because they are paid. So, for example, when a team of five passionate Open Source programmers volunteer their time and build a thriving community and a better product than teams of a 100 funded by billions of dollars of revenue from Google, the phenomenon calls into question the Big Tech, capitalist means of producing technology. Programmers are driven by more than shallow self-interest, but by a desire for community, recognition, and craftsmanship. The major platform for Open Source, GitHub, enables a transparent record of every line of code and every comment/discussion made by an individual, even in a complex codebase. This radical transparency and tracking allow for individual contributors to be recognized and recognize their contributions to a greater whole. Unlike the programmers of Big Tech, they are not alienated from their labor. This in it of itself is worth serious consideration. \n\n  \n\nSecond, it empowers workers with choice and a clear record of their contributions. They can choose to work on any project they desire, moving from project to project, developing a resumé that is their GitHub record of all their work. This allows these programmers to find and work on problems they truly care about and find interesting. \n\n Finally, the transparency of the technique influences the kind of technology that even gets built. The most politically oppressive technology can only be produced under the cover of obscurity. Especially as there is greater concern about the ethical implications of technologies, many of the worst uses can be averted through openness. The mere transparency or lack thereof guides technology into emancipatory or tyrannical directions.  \n\n  \n\nUnderlying Open Source's emancipatory potential is its technique which empowers us to create and see ourselves as part of that human collective process of shaping the world. The psychological implications are just as empowering as the political ones. It is about time the programmer, in the broadest sense, recognizes both. With this recognition the programmer becomes a more intentional and potent political force that can bring about this future rather than, often times, unknowingly, prevent it. \n\n  \n\nThe material conditions have changed and we must change with them. There is no going back to pre-technology, pre-internet, or pre-BigTech. For better or worse, technology mediates our experiences of art, the world, and ourselves. Technology has changed the way we live and shape the world, and fundamentally our relationship with technology is changing beneath our feet. It is important for everyone to develop their identity as programmers and embrace the political responsibility of that. Rather than allowing market incentives to shape technology, we must demand an active role in shaping it. This is no longer an empty cry, but one that can be realized. Open Source engenders community, diminishes the distinction between users and producers, and empowers us to shape our technology. Capital inflow has accelerated and empowered Open Source, but we must be cautious that its technique remains transparent and encouraging — the basis of its emancipatory potential. Professional programmers have the power to vote with their feet, time, and skills. The decisions about what to work on matters, but so does how it is worked on too. I share in Benjamin's cautious optimism that technology can bring about a better, freer future. Whether is used for those ends or as a tool for social control, is still to be decided — by us. So then I will end, perhaps fittingly, with a call to action to all my readers — not only to ‘professional’ programmers. Here goes:\n\n  \n\nUnless you live alone under a literal rock, you, my reader, most definitely interact with technology. It can often feel like the forces that govern technology are out of your control. This is not true. Remember, \"all that is solid melts into air.\" You must demand of your technology what you want. Do not throw your hands up in frustration the moment things get technical. I am not advocating you go back to school and get a degree in Computer Science, or even learn to code. I am advocating to Know Thy Tools. If you use a piece of software regularly, learn it. Learn the shortcuts, and learn where and how you can customize it to do what you want. If you find that you cannot customize it, take the time to research other tools you can. Many of these will be Open Source or use its technique. Choose to use Open Source projects with vibrant communities even if they are rougher around the edges. Join their community Slack or Discord, and voice your frustrations. Talk to the programmers creating these products because they, unlike the programmers at Apple, or Google, will likely listen. In doing so, you are becoming empowered as a producer of technology. Your digital tools are as much a part of you as your limbs. They are the digital nervous system that allows you to shape the world and the people in it.  Invest in learning them. More often than not, technical jargon and claims of \"complexity,\" especially by those in Big Tech, are meant to keep you as a passive user. They have a vested interest in keeping you from building technology. Their individual pay is economic power under Big Tech is based on scarcity and homogeneity. Above all, they want you to forget that technology is meant for human flourishing — not capital. \n\n  \n\nSource:\n\nBenjamin, W. (1966). The Author as Producer. Understanding Brecht, ISBN 1-85984-814-1 ​​\n\nJan Sieber, “Walter Benjamin's Concept of Technique”, Anthropology \u0026 Materialism [Online], 4 | 2019, Online since 13 October 2019, connection on 31 May 2022. URL: http://journals.openedition.org/am/944; DOI: https://doi.org/10.4000/am.944\n\n  \n  \n  \n  \n\nGRAVEYARD:\n\n  \n\n[https://en.wikipedia.org/wiki/Art_in_Nazi_Germany](https://en.wikipedia.org/wiki/Art_in_Nazi_Germany)\n\n  \n  \n\n-   Technique guides tendency → \n    \n-   Just as the concept author was once filled with authority, and the emancipatory press expands that concept to → less authority of the programmer. \n    \n\n—--\n\nToo much on Benjamin/ art\n\n  \n\nThe aesthetic purist who denies this political dimension under the cry , tacitly supports a politics that naturalizes and obscures the authority of the people and institutions that define art. Who is funded, decide what counts as art, who is considered an artist — specifically those .**\n\nTechnique and Materialism:  \nNothing is more material than \"technology\" itself.\n- What can Benjamin tell us about the programmer and technology in the 21st century? A whole lot. Like art, technology is a potent political tool. The internet and social media, tools many argue were essential to events like the Arab Spring, are widely used by governments and institutions to surveil and suppress. \n\nBefore I lose the card-carrying capitalists whose complete retort to the ideas of Marx and Hegel is \"communism never worked,\" none understood capitalism, its tensions and shortcomings better than them. Furthermore, Marx, in particular, was acutely aware of the ability of capitalism to co-opt efforts to change it. This is particularly important. \nThe programmer, therefore, has political power as the producer of technology. Benjamin’s method and theory form the basis of a similar politically oriented and materially rooted theory of programmer and technology, which I begin here.                   \n\nSpecifically, my goal is to provide a framework to understand the political power of the programmer as a producer of technology, drawing from Benjamin's analogous theory developed in Author as Producer.  I begin by motivating and explaining Benjamin's concept of “technique.” Like Benjamin, I adopt a materialist lens which means I focus on how modern-day technology is produced, so I define Open Source and Big Tech, as the two “means of production”. Employing Benjamin's analogous analysis of the newspaper, I argue that the emancipatory potential of Open Source lies in its technique, which, unlike the technique of Big Tech, weakens the distinction between user and producer. Finally, I conclude that Open Source, even as it interacts with Big Tech and capital, has the emancipatory potential to democratize programming, empowering communities to shape the technology rather than let it be shaped by the incentives of capital. ","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Tools/Ibn-Tufayl":{"title":"The Primacy of the Physical in Ibn Tufayl's Philosophical Tale","content":"\nWhat is a human without society? To some, the question is nonsensical; to others, none is more important. Because, for the latter group, the hypothetical isolated human in what later European philosophers call “the state of nature,” shows us how we really are. Writing in 12th century Islamic Spain, Ibn Tufayl considers this question in the allegorical and philosophical tale of Hayy Ibn Yaqzān. The tale chronicles the spiritual development of Hayy, who was raised on an island in a state of nature, and reasons to the Qur’anic God eventually reaching the height of Islamic spirituality: a meditative, ecstatic, Sufi-like, peak spiritual experience of God. The sufficiency of reason contradicts Islam’s most prominent philosopher, Al-Ghazali. In Deliverance from Error, Al-Ghazali famously concludes that to truly feel God one must relinquish reason and take a leap of faith. However, Ibn Tufayl's critique of Al-Ghazali is not merely limited to the role of reason in the spiritual path. An often overlooked aspect of the tale, central to a complete understanding of Ibn Tufayl’s critique and project, is the significance of the physical world. In this essay, I argue that Hayy's process of gaining knowledge, reasoning from the physical world to the soul and eventually to God, and his changing relationship with the physical world through this process show that Ibn Tufayl's religious worldview is humanistic and this-worldly. Ibn Tufayl, unlike Al-Ghazali, sees this life and the physical world, as ultimately worth affirming, not one to be endured. \n\nHayy's knowledge of God is based on knowledge of the physical world. Knowledge of the physical world underlines God since he defines God and the soul as that which is \"non-physical.\" The “non-physical” is not a mere description of God, but the definition of God. Hayy first makes distinguishes the “physical” and “non-physical” when his doe mother dies. Looking at her dead body, with her heart in his hands, Ibn Tufayl narrates Hayy reasoning, \"[f]rom that - and not from this lifeless body - all those actions had issued. The body was simply a tool of this being, like the stick with which he fought the animals\" (Ibn Tufayl, pg. 115). Hayy reasons that his mothers identity must have once been in \"that,\" which he is holding — her heart. He sees \"that\" as the driver of the body and the source of her \"true\" identity. The “physical” was “simply a tool” of the non-physical. Hayy reasons by analogy. Just as the stick is the \"tool\" he used to fend off animals, the body is the tool for \"that.\" This process of observation of the physical world and reasoning about it is his method of gaining knowledge about God. After realizing the importance of the physical world for knowledge of the non-physical, Hayy turns to dissecting and studying the animals around him. The knowledge he gains after years of studying animal behavior and anatomy helps him clarify what he called \"that,\" his mother's \"true\" identity, into the concept of the \"soul.\" He comes to see all living beings as \"compounded out of the corporeal factor and another, non-physical factor [...]. He dropped the physical and his mind fastened on the other factor, which is called simply the soul.\" (Ibn Tufayl, pg 124) Living things are a mixture of physical and non-physical factors. The soul — defined as the “non-physical” — uses the body — the “physical.” This relationship of utility between the binary “physical” and “non-physical” is a central idea he develops in his spiritual progress. The definition of God, which is based on the negative emphasis (non-physical) shows that knowledge of God is in the physical world. Ibn Tufayl imbues this world and knowledge of it with divine importance since only by studying it do we come to learn about God.   \n\nHayy’s dual concept of the self — the idea that we are a combination of the physical and non-physical — forms the hierarchy of his morality. The higher, \"non-physical\" is associated with the nobility and the \"physical\", although it is not characterized as inherently evil, is seen as the “lower” “animal” part of himself. From this hierarchy, Hayy infers a moral obligation to study and cultivate the “non-physical” and therefore emulate God, whom Hayy importantly refers to in this passage using the capitalized, Qur'anic pronoun \"Him.\"  \n\n\"... Hayy saw that his nobler part, by which he knew the Necessarily Existent, bore some resemblance to Him as well. For like Him it transcended the physical. Thus another obligation was to endeavor, in whatever way possible to attain His attributes [...] and remold his character to His [....]. He recognized, however, that he was like the lesser animals in his lower half, the body for it belonged to the world of generation and decay. [...]Still, he knew that this body had not been created for him idly. It had not been linked with him for nothing. He must care for it and preserve it, even though in do in so doing he would do no more than any animal. \"(Ibn Tufayl, pg 142)\n \nHayy “nobler parts” refers to his capacity to reason. To emphasize that Hayy is reasoning to God,  the term \"the Necessarily Existent\" with capitalization refer to God. As Hayy realizes that a part of him — specifically that capacity to reason — he must now try to be like God. At this point in the passage, Ibn Tufayl switches from calling God \"Necessarily Existent\" to the capitalized \"Him\". Ibn Tufayl makes this decision because it shows a correspondence between \"him\" (Hayy) and \"Him\" (God). The syntactic similarity between \"him\" and \"Him\" helps convey the point. Hayy derives a moral obligation is to become like God, in \"whatever way possible.\" To turn the lowercase h into an uppercase H. As humans, there is a \"part\" of us that is like God — namely our reason. Hayy must \"remold\" his “lower part” according to his “higher” one. The word \"remold\" rather than a more destructive term, as used by the Sufis, like \"annihilate\" implies an acceptance/integration of the self rather than a destruction of oneself. Ibn Tufayl sees the self as a mixture of the physical body and the soul — the \"physical\" and \"non-physical\", or the animal and the God. At no point does Ibn Tufayl tell us to reject the physical. Hayy's body is not to be mortified or hated. Yes, it is lower than his \"nobler parts\", but it is a part he must accept as a responsibility to \"care for\" and “remold.” His body, a symbol of his connection to the physical world, has as a purpose. It was \"linked\" to him for a reason, namely to, \"remold\" it according to his “higher” self.\n\nOne way to see Hayy's spiritual progress is his use of the physical world as a \"tool\" for progressively \"higher\" ends. Hayy always used the physical world, but what changes as he develops spiritually is his reason why. In the first quarter of his life, Hayy realizes that \"despite his lack of natural weapons, he could manufacture everything he wanted to make up for the lack\" (Ibn Tufayl, pg 118). Hayy is superior to all other animals because of the tools he makes for protection, shelter, hunting, etc. However, his “use” of reason is for the same end as the animals. After the death of his mother and the beginning of his exploration of the soul, Hayy dissects animals to gain knowledge of the \"physical world\" and \"non-physical world.\" He now uses the physical world to gain knowledge, a uniquely human pursuit, guided by reason, and therefore a \"nobler\" end than mere survival and material comfort. Finally, in his last stage before a peak experience of God, his \"use\" of the physical world is purely for material sustenance to \"resemble\" God. Ibn Tufayl narrates, \"Hayy knew that his supreme goal was this third form of mimesis [of God]; but this would not be his without a long stint of training and self-discipline through the second, and this itself would not hold up for long if he neglected the first.\" (Ibn Tufayl, pg. 143) The second form of mimesis is a reference to the celestial bodies, and first to \"inarticulate animals.\" (Ibn Tufayl, pg. 142) Ibn Tufayl constructs a tri-level pyramid. At the base of the pyramid are physical necessities like food and shelter. As he progresses up the pyramid, the reason for using the \"physical world\" changes but remains necessary. still is needed.  At the highest for of mimesis, the physical world is used only to sustain Hayy's body. Ibn Tufayl's refusal to neglect the \"base\" materiality of human identity emphasizes its importance in peak religious experience in a way that is radical. Humans are a mixture of \"Himself\" (God) and the animal, and we must accept all of ourselves.  From survival to knowledge, and finally mimesis of God, we are inescapably reliant on the “physical world.” We do not have to destroy this “animal” part of ourselves use it and \"remold it\" for our highest purpose — the emulation of God. \n \nAt this point, one might object that I have overstated the significance of the physical world. An alternative explanation for the continual references to physicality is to avoid plot holes in the story, and therefore the \"physical\" is not as philosophically significant as I have argued. However, this text, the story, and philosophy work together. Ibn Tufayl's peculiar choice of medium, a philosophical tale, emphasizes that the plot is deeply intertwined with his underlying philosophy. Hayy's isolation from society means he does not have access to the Qur'an or any textual, communitarian aspects of Islam. For the Islamic tradition where the foundational text is the unequivocal word of God, this is radical. However, equally significant, Ibn Tufayl’s choice to put Hayy on an island burgeoning with life brings him closer to nature in a way society does not allow. Civilization separates us from nature and the \"physical world.\" Humans are removed from contending with other animals and from the harshness of the natural world. We no longer need to fight for our safety in the way Hayy has to. It is the combination of the lack of scripture and society, as well as the proximity and harshness of the physical world, that leaves Hayy with only two things — his reason and nature. Faith in scripture is no longer an option, and neither is the material protection from nature by society. So when Hayy perfectly understands the God of the Qur'an as confirmed by Absal, and describes an ecstatic experience with God similar to that of the Sufis and Al-Ghazali, it is both brilliant and radical.\n\nThe consequences of the primacy of the physical in Hayy Ibn Yaqzān illuminate a radical difference in Ibn Tufayl's and Ghazali's religious worldview. While they describe similar experiences of God and agree on the societal importance of the Qur'an, for Ibn Tufayl it is not the annihilation of the self, but a subordination of the physical body to the Godly \"true\" self that leads to ultimate spiritual salvation.  When we use all the tools at our disposal — reason and the physical world — for the singular purposes of mimesis we feel God. Reason is sufficient and the physical world is a tool not an obstacle on the way to salvation. Al-Ghazali and the Sufi see the \"physical\" more antagonistically. While one can achieve ecstatic union with God, the body is in the way, and therefore, self-mortification and severe asceticism are often practiced. Their worldview, in contrast to Ibn Tufayl's, is other-worldly. Life, under their worldview, should only be endured until the Day of Judgement. The ecstatic experience of God is a respite from this-world. Whereas for Ibn Tufayl the world and all of its beings have a spark of God emanating from them. There is a harmony that is possible between the “physical” and “non-physical.” At his peak, Hayy is not a physical and non-physical being but experiencing the unity of purposes in himself and in this world. He does this by integrating and subordinating the physical self to the true, transcendent, and “non-physical” self. Whereas the Sufi path is shrouded in mysticism and faith, Hayy's path is based entirely on the universal human of reason grounded in experience of the physical world. It is not easy to figure out, but the Qur’anic understanding of God is accessible in nature and human nature. Ibn Tufayl is not critical of Qur’an in any way, but through the tale of Hayy Ibn Yaqzān shows that it is not absolutely necessary. It is possible to reason to an experience of God in a ‘state of nature.’ This possibility has radical implications for Islamic spirituality. \n\nIbn Tufayl’s Hayy Ibn Yaqzān is an allegorical and philosophical tale that emphasizes the primacy of physicality. Hayy's knowledge of God and the soul is based on knowledge of the \"physical.\" Hayy \"uses\" the physical world to accomplish increasingly spiritual ends and comes to see his animal, physical self as a necessary responsibility and part of his identity. In emphasizing the primacy of the physical, Ibn Tufayl put the whole human, their mixed identity and place in the natural world, at the forefront of his religious worldview. He sees the physical world as the basis for knowledge of God. Humans are a unique species with a Godlike capacity to reason. When the highest form of reason — the mimesis of God — uses the physical world and body for this sole purpose, one reaches the height of Islamic spirituality. For these reasons, Ibn Tufayl's religious worldview is humanistic and focused on this world. One does not need to annihilate oneself or parts of oneself for intimacy with God. Hayy's God is consistent with the God of the Qur'an. Still, in telling this story, Ibn Tufayl presents a compelling, rational case for a God, a mixed self, and a path to reach him, which all thinkers, regardless of faith or religion, will continue to wrestle with across centuries and civilizations. \n\nReferences\n Ibn Tufayl's Hayy Ibn Yaqzan, tr. Lenn Evan Goodman (University Chicago Press, 2009)\n\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/digital-garden/Wisdom":{"title":"","content":"\n\n\u003e  \"As Archimedes said: Just give me a bash line long enough and a console to run it  and I will move the world\"\n\u003e  \nLjupco","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (测试)","content":"\n## Chinese, Japanese, Korean Support\n几乎在我们意识到之前，我们已经离开了地面。\n\n우리가 그것을 알기도 전에 우리는 땅을 떠났습니다.\n\n私たちがそれを知るほぼ前に、私たちは地面を離れていました。\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\n\n## Showcase\n\n\u003e [!EXAMPLE] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nenableSemanticSearch: false\noperandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"🪴 Quartz 3.2\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'مدونتي'\n    weight = 1\n```\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\nYou can also use wikilinks if that is what you are more comfortable with!\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e 🔗 Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n❌ [Excluding pages from being published](notes/ignore%20notes.md)\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: 🎨 [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2022-09-23T21:44:28.555696698Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e 👀 Step 4: [Preview Quartz Changes](notes/preview%20changes.md)","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e “[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.” — Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e 🌍 Step 5: [Hosting Quartz online!](notes/hosting.md)","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Create an Operand Account on [their website](https://operand.ai/).\n2. Go to Dashboard \u003e Settings \u003e Integrations.\n3. Follow the steps to setup the GitHub integration. Operand needs access to GitHub in order to index your digital garden properly!\n4. Head over to Dashboard \u003e Objects and press `(Cmd + K)` to open the omnibar and select 'Create Collection'.\n\t1. Set the 'Collection Label' to something that will help you remember it.\n\t2. You can leave the 'Parent Collection' field empty.\n5. Click into your newly made Collection.\n\t1. Press the 'share' button that looks like three dots connected by lines.\n\t2. Set the 'Interface Type' to `object-search` and click 'Create'.\n\t3. This will bring you to a new page with a search bar. Ignore this for now.\n6. Go back to Dashboard \u003e Settings \u003e API Keys and find your Quartz-specific Operand API key under 'Other keys'.\n\t1. Copy the key (which looks something like `0e733a7f-9b9c-48c6-9691-b54fa1c8b910`).\n\t2. Open `data/config.yaml`. Set `enableSemanticSearch` to `true` and `operandApiKey` to your copied key.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: true\noperandApiKey: \"0e733a7f-9b9c-48c6-9691-b54fa1c8b910\"\n```\n7. Make a commit and push your changes to GitHub. See the [[notes/hosting|hosting]] page if you haven't done this already.\n\t1. This step is *required* for Operand to be able to properly index your content. \n\t2. Head over to Dashboard \u003e Objects and select the collection that you made earlier\n8. Press `(Cmd + K)` to open the omnibar again and select 'Create GitHub Repo'\n\t1. Set the 'Repository Label' to `Quartz`\n\t2. Set the 'Repository Owner' to your GitHub username\n\t3. Set the 'Repository Ref' to `master`\n\t4. Set the 'Repository Name' to the name of your repository (usually just `quartz` if you forked the repository without changing the name)\n\t5. Leave 'Root Path' and 'Root URL' empty\n9. Wait for your repository to index and enjoy natural language search in Quartz! Operand refreshes the index every 2h so all you need to do is just push to GitHub to update the contents in the search.","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\n📁 [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ✏️ Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (测试)](notes/CJK%20+%20Latex%20Support%20(测试).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\n🐛 [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2022-09-23T21:44:28.559696695Z","tags":null}}
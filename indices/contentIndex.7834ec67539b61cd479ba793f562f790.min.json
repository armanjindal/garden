{"/":{"title":"ü™¥ Arman Digital Garden","content":"## Hello Word\n- [Hello World](Hello%20World.md)\n\n\u003e üìö Step 1: [Setup your own digital garden using Quartz](notes/setup.md)\n\nReturning user? Figure out how to [[notes/updating|update]] your existing Quartz garden.\n\nIf you prefer browsing the contents of this site through a list instead of a graph, you see a list of all [setup-related notes](/tags/setup).\n\n### Troubleshooting\n- üöß [Troubleshooting and FAQ](notes/troubleshooting.md)\n- üêõ [Submit an Issue](https://github.com/jackyzha0/quartz/issues)\n- üëÄ [Discord Community](https://discord.gg/cRFFHYye7t)\n\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/Hello-World":{"title":"Hello World","content":"","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/Writing/The-Political-Programmer":{"title":"","content":"# The Political Programmer \nWalter Benjamin's political theory of Art and Artist on a political theory potential of 'Open Source' in an age dominated by 'Big Tech.' \n\nBy Arman Jindal¬†\n*May 13, 2022* \n\n- \"*Tech for good*.\" It's a sentiment you'll find on T-shirts, in LinkedIn bios, and across social media. The first time I saw it, it struck me as another rather banal truism. No one tries to make \"tech for bad,\" so specifying felt both suspiciously virtuose. But lurking beneath this slogan are two compelling ideas I've continued to grapple with and see many of my peers do the same.\n\n- First, programmers are increasingly aware of the politics of their work. Since they produce technology, and technology shapes our societies, programmers have a unique and inescapable political dimension. \n* Second, producing \"tech for good\" is surprisingly difficult. Not only in a technical sense but in a practical one. We never know how technology will be used. For better or worse, the intentions of creators don't count. The best intentions of researchers behind the CRISPR gene editing, for example, don't prevent its use in manufacturing deadly virus.\n* In contrast, the greatest innovations of the 20th century, such as flight, the modern computer, and the Internet, began as military projects. Our most important were spurred by the world wars and a desire to effectively kill other people. Are these technologies \"good\" or \"bad\"? That's a question I do not think can be answered productively, nor one I *want* to attempt to answer here. \n* But at the same time, suspending judgment on which technologies we want to work to create because \"we can't be sure\" is a cop-out.  \n* It also does not help the politically conscious programmer decide, in their limited knowledge, where to work.\n* Instead of looking at what technology does, I want to ask how it is made. The *means of its production*. Specifically in the context of the exciting rise of venture-backed open source companies. \n* Here I re-define \"Open Source\" and \"Big Tech\" (both provocative terms) as techniques of producing technology. The goal in this essay is to develop the nascent political consciousness of the programmer, rooted in the material, political, and technological conditions of the 21st century. \n* To do this, I will draw from a seemingly unlikely source: art. Specifically on the political theory of art and artist, Walter Benjamin develops as a German-Jewish philosopher writing during the rise and reign of Nazi Germany and Fascist Italy.\n- There is a rich parallel between the 21st-century programmer and the 20th-century artist. Throughout this essay, I will develop this parcellel with a close reading of Benjamin's text \"Author as Producer.\" But before I dive into the politics of it all, there is a beauty in tech that should come back. For too long have we programmers forgotten that technology, like art, is magic? Magic is political. So let's get to it. \n\nThe Duality of Art \u0026 Technology and the end of the Apolitical Producer: \n- Art during the rise of Nazism and the spread of Marxism was the former weapon and the latter's \"blank canvas\" upon which new societies could be imagined. Art and artist were inextricably political. \n- Writing in WWII continental Europe, Walter Benjamin, an influential and posthumously famous philosopher, develops a political theory of the author and art. \n\n\nTechnique and Materialism:  \nNothing is more material than \"technology\" itself.\n- What can Benjamin tell us about the programmer and technology in the 21st century? A whole lot. Like art, technology is a potent political tool. The internet and social media, tools many argue were essential to events like the Arab Spring, are widely used by governments and institutions to surveil and suppress. \n\nBefore I lose the card-carrying capitalists whose complete retort to the ideas of Marx and Hegel is \"communism never worked,\" none understood capitalism, its tensions and shortcomings better than them. Furthermore, Marx, in particular, was acutely aware of the ability of capitalism to co-opt efforts to change it. This is particularly important. \nThe programmer, therefore, has political power as the producer of technology. Benjamin‚Äôs method and theory form the basis of a similar politically oriented and materially rooted theory of programmer and technology, which I begin here.¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†\n\nSpecifically, my goal is to provide a framework to understand the political power of the programmer as a producer of technology, drawing from Benjamin's analogous theory developed in Author as Producer.¬† I begin by motivating and explaining Benjamin's concept of ‚Äútechnique.‚Äù Like Benjamin, I adopt a materialist lens which means I focus on how modern-day technology is produced, so I define Open Source and Big Tech, as the two ‚Äúmeans of production‚Äù. Employing Benjamin's analogous analysis of the newspaper, I argue that the emancipatory potential of Open Source lies in its technique, which, unlike the technique of Big Tech, weakens the distinction between user and producer. Finally, I conclude that Open Source, even as it interacts with Big Tech and capital, has the emancipatory potential to democratize programming, empowering communities to shape the technology rather than let it be shaped by the incentives of capital.¬†\n\n## Duality of Art \u0026 Technology\n-  [Walter Benjamin](https://www.encyclopedia.com/people/literature-and-arts/german-literature-biographies/walter-benjamin) (1892-1940) was a German-Jewish political philosopher. \n- Wrting and living during WWII he witnessed Nazi Germany and Fascist Italy weaponize art. Art, \"aesthetics\" more broadly was used to manufacture a society willing to endure brutal means for \"beautiful\" ends. \n- However, just as art could be used for tyrannical and genocidal ends, Benjamin saw it as the place to imagine free societies. In the revolutionary context of late 19th and early 20th century Europe, where questions of how to govern a society was reignited with emergence of Marxism, art was the medium to collectivley imagine and eventually create a society human flourishing that had never existed before.\n- Art has always been a powerful force. The towering churches across Europe and the near monopoly the Church had over the production of art affirmed its \"divine\" authority of God. \n- However in Benjamin's time conditions of art changed. \n\n\n## Materialism \u0026 Technology\n- Technology, such as photography, radio, film and the newspaper changed the\"art.\"  Not only expanding its consumption to the masses, but changed what was made. \n- As such, Benjamin  takes a *materialist* approach to his political analysis of art. Instead of focusing on the content or form of the artwork, or the \"ideas\" around art, he examins the art in the social, political and technological conditions within which it is produced. Specifically, in the context of capitalism, he ask the deeply relevant question we grapple with today: can art truly change a society that enables its production.\n\n## Definition of the Programmer \nBefore I lay out that theory, I want to discuss the definition of a programmer. As the title suggests, I‚Äôve defined the programmer as the producer of technology. But who gets to produce technology?¬†  \n\nIn Author as Producer (1934), Benjamin proclaims that amidst technological innovation and new political demands, we must expand our old \"notions of literary form\" and ‚Äúauthorship‚Äù to find new \"forms appropriate to the literary energy of our time.\" Today, I argue, we must similarly expand our notion of a programmer. Not merely because of new technology but because our fundamental relationship with technology is changing. Now more than ever, and at an increasing rate, we are creating technology ‚Äî not just using it.¬†¬†\n\nWith the rise of Personal Computers, the proliferation of software and the internet, accessibility of information, and greater intimacy with digital tools, these new material conditions of innovation have dramatically changed our relationship with technology: from user to producer. This change is still underway, but the rise of¬† '[power-users](https://www.urbandictionary.com/define.php?term=Power%20user)' ‚Äî users who customize their technology for a specific use ‚Äî clearly demonstrates that the line between user and producer is blurring. TikTok and Instagram users build custom filters; graphic designers and music producers regularly extend and connect the digital tools that make their work possible. These power-users, who are often artists but range from productivity nerds to gardening hobbyists, are for the first time becoming the producers of the technology they use. This trend is most visible in software but is not limited to it. Affordable micro-controllers like the Arduino and RaspberryPi make bringing code into the physical world more straightforward [than ever](https://www.youtube.com/watch?v=LCcO-6lb9zM\u0026t=38s). Though there are very real and pressing inequalities in access to technology and education, it is theoretically possible to modify and shape technology like never before. We can all produce technology and, therefore, all become programmers. I believe realizing this theoretical possibility is immensely emancipatory. The professional programmer, who epitomizes the producer's relationship with technology, much like the artist, has an essential role in determining if we do or not. So my analysis will focus on the professional but the implication extends far beyond.¬†\n\n- I've redefined \"good\" - and why this definition might be preffered a\n## Literary Technique  \nBenjamin begins Author as Producer by criticizing the common debate between a literary work's political commitment, its ‚Äútendency,‚Äù and its literary ‚Äúquality.‚Äù¬† On the one hand, work with a ‚Äògood‚Äô political commitment but of ‚Äòpoor‚Äô quality is clearly not great. But on the other hand, what about work with a terrible ‚Äútendency‚Äù of high artistic ‚Äúquality?‚Äù [Triumph of the Will,](https://en.wikipedia.org/wiki/Triumph_of_the_Will) the infamous Nazi propaganda film is a typical provocative example of these kinds of works. Can a work that tries to bring about a ‚Äòbad‚Äô political end be truly great? The debate rages on, even today. Benjamin believes that ‚Äútendency\" and \"quality\" are superficial, dead-end concepts. He writes, ‚Äú[y]ou are familiar with it, [‚Äòtendency‚Äô vs. ‚Äòquality‚Äô,] and so you know how unfruitful the debate has been. For the fact is that this debate has never got beyond a boring ‚Äòon-the-one-hand‚Äô, ‚Äòon-the-other-hand‚Äô[...].‚Äù Instead of asking about a work‚Äôs tendency, which is seldom straightforward except in the most extreme cases, Benjamin introduces the concept of technique by asking a different question. \"Before I ask what is a work's position vis-√†-vis the production relations of its time, I should like to ask: what is its position within them? This question concerns the function of a work within the literary production of its time. In other words, it is directly concerned with literary technique.\" (Benjamin, pg 87). Benjamin shits the focus of criticism from a work's political ends to its position within the ‚Äúliving and breathing production relation.‚Äù Not to ask what it says, but instead what it does. To answer the latter question, particularly for a Marxist, we must look at how it was produced¬† ‚Äî its ‚Äútechnique.‚Äù Only when it is considered in these dynamic material terms can we understand the unique, self-referential power art has to change the society that enabled its production.¬†\n\nThis question is not limited to criticism of capitalism (produced under/using it) but extends to any work that hopes to change society. For example, the Netflix ‚Äúdocumentary‚Äù¬† The Social Dilemma, is promoted on social media, using the same unethical and user-privacy abusing algorithms it attacks. Banksy‚Äôs artwork, critical of the obscene pricing of art and authority of art institutions, sells for millions at auction houses (three times as much when [half-shredded](https://www.npr.org/2021/09/07/1034962331/banksy-shredder-girl-with-balloon-love-is-in-the-bin-auction-sothebys)!). Benjamin poses a subtler question: can art change its conditions of production, or is it condemned to reproducing them, try as they might? Benjamin believes art can, but we must look to the material ‚Äútechnique‚Äù to understand how.\n\n\nTechnique is a philosophically loaded term Benjamin uses extensively throughout his work. Broadly defined as ‚Äúthe medium through which we humans [...] [shape the world](https://journals.openedition.org/am/944),‚Äù technique includes tools and how we use them ‚Äî technology and the social relations of prodcution ‚Äî but also how those tools shape us. Technique, according to Benjamin, ‚Äúmakes literary products accessible to immediate social, and therefore materialist, analysis. At the same time, the concept of technique represents the dialectical starting-point from which the sterile dichotomy of form and content can be surmounted.\" (Benjamin, pg 88).¬† The dichotomy is \"surmounted\" because \"technique\" considers how content, form, art, and artist are inextricably linked by the material conditions. Just as the editing tools of Photoshop and the distribution platform of Instagram, for example, influence form, so too do economic and societal norms on what users engage with influence the content. He calls the concept a ‚Äúdialectical starting point‚Äù since it gets us beyond the limited ‚Äúon-the-one-hand, on the other-hand-debate‚Äù to a more productive one centered on ‚Äútechnique.‚Äù This focus helps us answer the question of a work's ‚Äúfunction.‚Äù\n\n  \n¬†Benjamin redefines ‚Äòtendency‚Äô in terms of progressive or regressive technique.¬† The former improves conditions and the latter re-enforces conditions of production. Benjamin writes, ‚Äú[w]e can now affirm more precisely that literary tendency may consist in a progressive development of literary technique, or in a regressive one.\"¬† The question for the critic is now no longer if a work has the right content or form but instead if it brings about a progressive or regressive technique. For example, a work whose content might be critical of capitalism but whose technique only strengthens its production relations falls short. Whereas a work whose content might, somehow, affirm its conditions but its technique somehow subverts them, it can (in theory) be emancipatory. So now the question is: what makes a technique progressive or regressive? The final part of this op-ed focuses on this question, but we now have enough Benjamin to shift the focus onto the programmer and technology. After which returning to this question becomes more productive. True to Benjamin's materialist approach, I start with how technology is produced ‚Äî its means of production.\n\n  ## Open Source Vs Big Tech\nOpen Source and Big Tech are the dominant ways programmers produce modern-day technology. ¬†Big Tech is a conventional capitalist means of production, whereas Open Source is a unique means of production with four distinctive characteristics:¬†\n\n1. Code is written by (historically) unpaid programmers¬†\n2. Collaboration is enabled through the internet using a transparent version control protocol ([Git](https://git-scm.com/)) hosted, most popularly, on [GitHub](https://github.com/)\n3. No one owns the code ‚Äî anyone can distribute, use, clone(fork), and modify it\n4. Open Source is community-driven and strives to make adding to the project's code as accessible as possible through documentation and educational resources.¬†\n\nI define Big Tech and Open Source (with capitalization) as a theoretical set of practices, ideas, and producer relations. Anyone who has experience with real open source projects knows many fall short on one or more of the characteristics listed above. Still, the incredible success and unquantifiable value of technology produced in this way, most notably the [Linux Operating System](https://www.youtube.com/watch?v=vjMZssWMweA), make its unique characteristics worthy of independent, theoretical analysis. \n\nOpen Source was once the dominant way all software was produced, but it solidified as a counterculture in the late '70s and early '80s when programmer hobbyists were frustrated that they could not view, fix bugs, or modify Big Tech‚Äôs closed, proprietary software. They saw Big Tech companies such as Windows and IBM who profited from proprietary software as betraying the open culture of sharing that characterized early software and the internet.¬† In contrast, Big Tech is a method of producing technology where programmers are paid in exchange for writing code, and the surplus-value of their labor goes to shareholders of the company. This code cannot be viewed, modified, or freely distributed. In the early 90‚Äôs Big Tech demonstrated that proprietary software could be immensely profitable since software could be resold for zero marginal cost. Between 1995 and 2000 there was a rush of speculative investment that eventually led to the crash known as the [dot com bubble](https://en.wikipedia.org/wiki/Dot-com_bubble). Markets soon stablized; capital and Big Tech have since been entwined. The Big Tech means of producing technology has come to be the standard. Open Source on the other hand has plugged in relative obscurity.¬† With minimal capital, open source communities have managed to create immense value by building critical infrastructure tools ‚Äî such as programming language, operating systems, databases, etc. However, Open Source is resurging today, and capital is beginning to enter it as companies demonstrate that profit is still possible, and in some cases, more likely, with an open source codebase. This rise of Open Source is immensely exciting, and has, as I will argue, immense emancipatory potential, which lies in its progressive technique.¬†\n\n\nThe technique of Open Source is progressive since it empowers users by turning them from isolated passive individuals into a community of active technology producers. Open Source, by its nature, is has an existential need for collaboration and community.¬† If it is too difficult to use, or to contribute to the project dies by neglect ‚Äîthe fate of 99.9% of open source projects. As such this existential need for community impacts everything from the kind of programmers it attracts to the quality of the code; from the tech stack used and its architecture to the tutorials and documentation on using it. Making the technology understandable and possible to contribute to impacts everything about the creation process, and what even gets made. By recruiting its users to producers Open Source does what Benjamin praises the Soviet press for; it weakens the distinction between reader and author. In Benjamin's analogous analysis of the newspaper, he writes:\n\n\n\"For as literature gains in breadth what it loses in depth, so the distinction between author and public, which the bourgeois press maintains by artificial means, is beginning to disappear in the Soviet press. [...] The vast melting-down process of which I spoke [...] questions even the separation between author and reader. The press is the most decisive point of reference for this process [...]\" For, as we know, the newspaper in Western Europe does not yet represent a valid instrument of production in the writer's hands. It still belongs to capital.\" (Benjamin, pg 90)¬†\n\n\nThe Soviet press, which Benjamin saw as filled with emancipatory promise, enabled the worker to go from a passive reader to an active writer. The technique of its production empowered the proletariat as a community to shape the forces that shaped them. Uncannily, Open Source does the same. It bonds users and producers together, through forums and discussion boards to collectively shape the technology that shapes them. These active developer communities ‚Äî armies of volunteer contributors ‚Äî who flag bugs, test features, write documentation, and build useful features are the envy of Big Tech companies.¬†\n\n  \n\nIn contrast, Big Tech is analogous to the newspaper of Western Europe, which works to maintain the distinction between user and producer through \"artificial means.\" Most obviously, by not sharing the source code, but more perniciously, through its technique. Since the public does not see the code, it is notoriously poorly documented, hard to understand, and idiosyncratic to the point of incomprehensibility to those outside the company. Big Tech overspecializes its programmers, and its long onboarding practices are evidence of its incomprehensibility. It trains programmers to operate on a narrow scope, and most importantly, does not cultivate the ability to communicate their contributions to outsiders of the organization. Combined with exclusionary hiring practices, often from feeder schools such as Columbia, MIT, and Harvard,¬† Big Tech selects and trains a politically impotent programmer.¬† Programmer are alienated from the technology they produce (in a codebase of millions of lines, individuals cannot see their contribution to the whole) and they lack the power to build in other collaborative, non-Big Tech, settings. In stark opposition to Open Source, the technique creates the pressure for obscurity rather than transparency. Under these conditions we have the most problematic and irresponsible uses of technology, which perpetuate social inequality and alienation.¬†\n\n  \n\nAt this point, many might contest the definition of Open Source and Big Tech, as well as generality of the claims I have made about their respective techniques. On the former objection, they contest that the neat, theoretical distinction doesn‚Äôt exist. This is absolutely correct. In reality, all technology is produced on a spectrum between Big Tech and Open Source. Some companies with open codebases might be using the technique of Big Tech, and similarly Big Tech companies, despite the provocative name, might practice the Open Source technique.¬†\n\n  \n\nDespite this complex reality I have hoped to theoretically distinguish between the two to arrive at¬†\n\n  \n\n¬†and idealizing the distinctive aspects it has allowed me to analyze the technique substantially.¬† This is helpful because although the relationship began antagonistically,¬† they are now interacting in exciting and troubling ways. Open Source projects are turning into large companies backed by (venture) capital. On the other hand, paradigmatic Big Tech companies such as Google and Microsoft are open-sourcing (yes, it is a verb) internal tools and code which generally would have remained closed. It is precisely these mixed cases that have motivated this op-ed, and where a discerning, theoretical discussion of their technique, rooted in Benjamin‚Äôs analysis of the Soviet Press and of Western Europe, is helpful.¬†\n\n  \n\nOn the latter objection, namely of the overstated impact of technique on the programmer, I am not saying all programmers become like this. Many of the best and most politically potent programmers in the world work at paradigmatic Big Tech companies. But I am claiming that they likely have resisted the incentives and pressures of conditions which are not conducive to developing that potency. Conversely, working on Open Source does not guarantee potency, but it makes it more likely.¬†\n\n  \n\nSo far, I have argued that the technique of Open Source is progressive and therefore, emancipatory because it, unlike its counterpoint, works to empower its users to producers. Does this remain even when capital enters into it? Yes. While Big Tech ‚Äúbelongs to capital‚Äù Open Source uses it. It uses capital in a way that questions the very production relations of conventional capitalism. It also allows technology to be shaped by humans for humans, not by humans for capital. Open Source accomplishes these lofty claims in a number of ways which, in concert, gradually becomes increasingly emancipatory. There is far too much to discuss here, so I¬† will focus on three.\n\n  \n\nFirst, it questions traditional producer relations and shallow theories of why we work. The success of Open Source is mind-blowing and complicates the (simplistic/Smithian) conventional capitalist theory of labor. The most crucial technologies upon which the internet and trillions of dollars of economic activity have been made are built by communities of programmer hobbyists, self-organizing, and working for free. Big Tech relies on and re-enforces the idea that workers work because they are paid. So, for example, when a team of five passionate Open Source programmers volunteer their time and build a thriving community and a better product than teams of a 100 funded by billions of dollars of revenue from Google, the phenomenon calls into question the Big Tech, capitalist means of producing technology. Programmers are driven by more than shallow self-interest, but by a desire for community, recognition, and craftsmanship. The major platform for Open Source, GitHub, enables a transparent record of every line of code and every comment/discussion made by an individual, even in a complex codebase. This radical transparency and tracking allow for individual contributors to be recognized and recognize their contributions to a greater whole. Unlike the programmers of Big Tech, they are not alienated from their labor. This in it of itself is worth serious consideration.¬†\n\n  \n\nSecond, it empowers workers with choice and a clear record of their contributions. They can choose to work on any project they desire, moving from project to project, developing a resum√© that is their GitHub record of all their work. This allows these programmers to find and work on problems they truly care about and find interesting.¬†\n\n¬†Finally, the transparency of the technique influences the kind of technology that even gets built. The most politically oppressive technology can only be produced under the cover of obscurity. Especially as there is greater concern about the ethical implications of technologies, many of the worst uses can be averted through openness. The mere transparency or lack thereof guides technology into emancipatory or tyrannical directions.¬†¬†\n\n  \n\nUnderlying Open Source's emancipatory potential is its technique which empowers us to create and see ourselves as part of that human collective process of shaping the world. The psychological implications are just as empowering as the political ones. It is about time the programmer, in the broadest sense, recognizes both. With this recognition the programmer becomes a more intentional and potent political force that can bring about this future rather than, often times, unknowingly, prevent it.¬†\n\n  \n\nThe material conditions have changed and we must change with them. There is no going back to pre-technology, pre-internet, or pre-BigTech. For better or worse, technology mediates our experiences of art, the world, and ourselves. Technology has changed the way we live and shape the world, and fundamentally our relationship with technology is changing beneath our feet. It is important for everyone to develop their identity as programmers and embrace the political responsibility of that. Rather than allowing market incentives to shape technology, we must demand an active role in shaping it. This is no longer an empty cry, but one that can be realized. Open Source engenders community, diminishes the distinction between users and producers, and empowers us to shape our technology. Capital inflow has accelerated and empowered Open Source, but we must be cautious that its technique remains transparent and encouraging ‚Äî the basis of its emancipatory potential. Professional programmers have the power to vote with their feet, time, and skills. The decisions about what to work on matters, but so does how it is worked on too. I share in Benjamin's cautious optimism that technology can bring about a better, freer future. Whether is used for those ends or as a tool for social control, is still to be decided ‚Äî by us. So then I will end, perhaps fittingly, with a call to action to all my readers ‚Äî not only to ‚Äòprofessional‚Äô programmers. Here goes:\n\n  \n\nUnless you live alone under a literal rock, you, my reader, most definitely interact with technology. It can often feel like the forces that govern technology are out of your control. This is not true. Remember, \"all that is solid melts into air.\" You must demand of your technology what you want. Do not throw your hands up in frustration the moment things get technical. I am not advocating you go back to school and get a degree in Computer Science, or even learn to code. I am advocating to Know Thy Tools. If you use a piece of software regularly, learn it. Learn the shortcuts, and learn where and how you can customize it to do what you want. If you find that you cannot customize it, take the time to research other tools you can. Many of these will be Open Source or use its technique. Choose to use Open Source projects with vibrant communities even if they are rougher around the edges. Join their community Slack or Discord, and voice your frustrations. Talk to the programmers creating these products because they, unlike the programmers at Apple, or Google, will likely listen. In doing so, you are becoming empowered as a producer of technology. Your digital tools are as much a part of you as your limbs. They are the digital nervous system that allows you to shape the world and the people in it.¬† Invest in learning them. More often than not, technical jargon and claims of \"complexity,\" especially by those in Big Tech, are meant to keep you as a passive user. They have a vested interest in keeping you from building technology. Their individual pay is economic power under Big Tech is based on scarcity and homogeneity. Above all, they want you to forget that technology is meant for human flourishing ‚Äî not capital.¬†\n\n  \n\nSource:\n\nBenjamin, W. (1966). The Author as Producer. Understanding Brecht, ISBN 1-85984-814-1 ‚Äã‚Äã\n\nJan Sieber, ‚ÄúWalter Benjamin's Concept of Technique‚Äù, Anthropology \u0026 Materialism [Online], 4 | 2019, Online since 13 October 2019, connection on 31 May 2022. URL: http://journals.openedition.org/am/944; DOI: https://doi.org/10.4000/am.944\n\n  \n  \n  \n  \n\nGRAVEYARD:\n\n  \n\n[https://en.wikipedia.org/wiki/Art_in_Nazi_Germany](https://en.wikipedia.org/wiki/Art_in_Nazi_Germany)\n\n  \n  \n\n-   Technique guides tendency ‚Üí¬†\n    \n-   Just as the concept author was once filled with authority, and the emancipatory press expands that concept to ‚Üí less authority of the programmer.¬†\n    \n\n‚Äî--\n\nToo much on Benjamin/ art\n\n  \n\nThe aesthetic purist who denies this political dimension under the cry , tacitly supports a politics that naturalizes and obscures the authority of the people and institutions that define art. Who is funded, decide what counts as art, who is considered an artist ‚Äî specifically those .**","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/CJK-+-Latex-Support-%E6%B5%8B%E8%AF%95":{"title":"CJK + Latex Support (ÊµãËØï)","content":"\n## Chinese, Japanese, Korean Support\nÂá†‰πéÂú®Êàë‰ª¨ÊÑèËØÜÂà∞‰πãÂâçÔºåÊàë‰ª¨Â∑≤ÁªèÁ¶ªÂºÄ‰∫ÜÂú∞Èù¢„ÄÇ\n\nÏö∞Î¶¨Í∞Ä Í∑∏Í≤ÉÏùÑ ÏïåÍ∏∞ÎèÑ Ï†ÑÏóê Ïö∞Î¶¨Îäî ÎïÖÏùÑ Îñ†ÎÇ¨ÏäµÎãàÎã§.\n\nÁßÅ„Åü„Å°„Åå„Åù„Çå„ÇíÁü•„Çã„Åª„ÅºÂâç„Å´„ÄÅÁßÅ„Åü„Å°„ÅØÂú∞Èù¢„ÇíÈõ¢„Çå„Å¶„ÅÑ„Åæ„Åó„Åü„ÄÇ\n\n## Latex\n\nBlock math works with two dollar signs `$$...$$`\n\n$$f(x) = \\int_{-\\infty}^\\infty\n    f\\hat(\\xi),e^{2 \\pi i \\xi x}\n    \\,d\\xi$$\n\t\nInline math also works with single dollar signs `$...$`. For example, Euler's identity but inline: $e^{i\\pi} = 0$\n\nAligned equations work quite well:\n\n$$\n\\begin{aligned}\na \u0026= b + c \\\\ \u0026= e + f \\\\\n\\end{aligned}\n$$\n\nAnd matrices\n\n$$\n\\begin{bmatrix}\n1 \u0026 2 \u0026 3 \\\\\na \u0026 b \u0026 c\n\\end{bmatrix}\n$$\n\n## RTL\nMore information on configuring RTL languages like Arabic in the [config](notes/config.md) page.\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/callouts":{"title":"Callouts","content":"\n## Callout support\n\nQuartz supports the same Admonition-callout syntax as Obsidian.\n\nThis includes\n- 12 Distinct callout types (each with several aliases)\n- Collapsable callouts\n\nSee [documentation on supported types and syntax here](https://help.obsidian.md/How+to/Use+callouts#Types).\n\n## Showcase\n\n\u003e [!example] Examples\n\u003e\n\u003e Aliases: example\n\n\u003e [!note] Notes\n\u003e\n\u003e Aliases: note\n\n\u003e [!abstract] Summaries \n\u003e\n\u003e Aliases: abstract, summary, tldr\n\n\u003e [!info] Info \n\u003e\n\u003e Aliases: info, todo\n\n\u003e [!tip] Hint \n\u003e\n\u003e Aliases: tip, hint, important\n\n\u003e [!success] Success \n\u003e\n\u003e Aliases: success, check, done\n\n\u003e [!question] Question \n\u003e\n\u003e Aliases: question, help, faq\n\n\u003e [!warning] Warning \n\u003e\n\u003e Aliases: warning, caution, attention\n\n\u003e [!failure] Failure \n\u003e\n\u003e Aliases: failure, fail, missing\n\n\u003e [!danger] Error\n\u003e\n\u003e Aliases: danger, error\n\n\u003e [!bug] Bug\n\u003e\n\u003e Aliases: bug\n\n\u003e [!quote] Quote\n\u003e\n\u003e Aliases: quote, cite\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/config":{"title":"Configuration","content":"\n## Configuration\nQuartz is designed to be extremely configurable. You can find the bulk of the configuration scattered throughout the repository depending on how in-depth you'd like to get.\n\nThe majority of configuration can be found under `data/config.yaml`. An annotated example configuration is shown below.\n\n```yaml {title=\"data/config.yaml\"}\n# The name to display in the footer\nname: Jacky Zhao\n\n# whether to globally show the table of contents on each page\n# this can be turned off on a per-page basis by adding this to the\n# front-matter of that note\nenableToc: true\n\n# whether to by-default open or close the table of contents on each page\nopenToc: false\n\n# whether to display on-hover link preview cards\nenableLinkPreview: true\n\n# whether to render titles for code blocks\nenableCodeBlockTitle: true \n\n# whether to render copy buttons for code blocks\nenableCodeBlockCopy: true \n\n# whether to render callouts\nenableCallouts: true\n\n# whether to try to process Latex\nenableLatex: true\n\n# whether to enable single-page-app style rendering\n# this prevents flashes of unstyled content and improves\n# smoothness of Quartz. More info in issue #109 on GitHub\nenableSPA: true\n\n# whether to render a footer\nenableFooter: true\n\n# whether backlinks of pages should show the context in which\n# they were mentioned\nenableContextualBacklinks: true\n\n# whether to show a section of recent notes on the home page\nenableRecentNotes: false\n\n# whether to display an 'edit' button next to the last edited field\n# that links to github\nenableGitHubEdit: true\nGitHubLink: https://github.com/jackyzha0/quartz/tree/hugo/content\n\n# whether to use Operand to power semantic search\n# IMPORTANT: replace this API key with your own if you plan on using\n# Operand search!\nenableSemanticSearch: false\noperandApiKey: \"REPLACE-WITH-YOUR-OPERAND-API-KEY\"\n\n# page description used for SEO\ndescription:\n  Host your second brain and digital garden for free. Quartz features extremely fast full-text search,\n  Wikilink support, backlinks, local graph, tags, and link previews.\n\n# title of the home page (also for SEO)\npage_title:\n  \"ü™¥ Quartz 3.2\"\n\n# links to show in the footer\nlinks:\n  - link_name: Twitter\n    link: https://twitter.com/_jzhao\n  - link_name: Github\n    link: https://github.com/jackyzha0\n```\n\n### Code Block Titles\nTo add code block titles with Quartz:\n\n1. Ensure that code block titles are enabled in Quartz's configuration:\n\n    ```yaml {title=\"data/config.yaml\", linenos=false}\n    enableCodeBlockTitle: true\n    ```\n\n2. Add the `title` attribute to the desired [code block\n   fence](https://gohugo.io/content-management/syntax-highlighting/#highlighting-in-code-fences):\n\n      ```markdown {linenos=false}\n       ```yaml {title=\"data/config.yaml\"}\n       enableCodeBlockTitle: true  # example from step 1\n       ```\n      ```\n\n**Note** that if `{title=\u003cmy-title\u003e}` is included, and code block titles are not\nenabled, no errors will occur, and the title attribute will be ignored.\n\n### HTML Favicons\nIf you would like to customize the favicons of your Quartz-based website, you \ncan add them to the `data/config.yaml` file. The **default** without any set \n`favicon` key is:\n\n```html {title=\"layouts/partials/head.html\", linenostart=15}\n\u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n```\n\nThe default can be overridden by defining a value to the `favicon` key in your \n`data/config.yaml` file. For example, here is a `List[Dictionary]` example format, which is\nequivalent to the default:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon:\n  - { rel: \"shortcut icon\", href: \"icon.png\", type: \"image/png\" }\n#  - { ... } # Repeat for each additional favicon you want to add\n```\n\nIn this format, the keys are identical to their HTML representations.\n\nIf you plan to add multiple favicons generated by a website (see list below), it\nmay be easier to define it as HTML. Here is an example which appends the \n**Apple touch icon** to Quartz's default favicon:\n\n```yaml {title=\"data/config.yaml\", linenos=false}\nfavicon: |\n  \u003clink rel=\"shortcut icon\" href=\"icon.png\" type=\"image/png\"\u003e\n  \u003clink rel=\"apple-touch-icon\" sizes=\"180x180\" href=\"/apple-touch-icon.png\"\u003e\n```\n\nThis second favicon will now be used as a web page icon when someone adds your \nwebpage to the home screen of their Apple device. If you are interested in more \ninformation about the current and past standards of favicons, you can read \n[this article](https://www.emergeinteractive.com/insights/detail/the-essentials-of-favicons/).\n\n**Note** that all generated favicon paths, defined by the `href` \nattribute, are relative to the `static/` directory.\n\n### Graph View\nTo customize the Interactive Graph view, you can poke around `data/graphConfig.yaml`.\n\n```yaml {title=\"data/graphConfig.yaml\"}\n# if true, a Global Graph will be shown on home page with full width, no backlink.\n# A different set of Local Graphs will be shown on sub pages.\n# if false, Local Graph will be default on every page as usual\nenableGlobalGraph: false\n\n### Local Graph ###\nlocalGraph:\n    # whether automatically generate a legend\n    enableLegend: false\n    \n    # whether to allow dragging nodes in the graph\n    enableDrag: true\n    \n    # whether to allow zooming and panning the graph\n    enableZoom: true\n    \n    # how many neighbours of the current node to show (-1 is all nodes)\n    depth: 1\n    \n    # initial zoom factor of the graph\n    scale: 1.2\n    \n    # how strongly nodes should repel each other\n    repelForce: 2\n\n    # how strongly should nodes be attracted to the center of gravity\n    centerForce: 1\n\n    # what the default link length should be\n    linkDistance: 1\n    \n    # how big the node labels should be\n    fontSize: 0.6\n    \n    # scale at which to start fading the labes on nodes\n    opacityScale: 3\n\n### Global Graph ###\nglobalGraph:\n\t# same settings as above\n\n### For all graphs ###\n# colour specific nodes path off of their path\npaths:\n  - /moc: \"#4388cc\"\n```\n\n\n## Styling\nWant to go even more in-depth? You can add custom CSS styling and change existing colours through editing `assets/styles/custom.scss`. If you'd like to target specific parts of the site, you can add ids and classes to the HTML partials in `/layouts/partials`. \n\n### Partials\nPartials are what dictate what gets rendered to the page. Want to change how pages are styled and structured? You can edit the appropriate layout in `/layouts`.\n\nFor example, the structure of the home page can be edited through `/layouts/index.html`. To customize the footer, you can edit `/layouts/partials/footer.html`\n\nMore info about partials on [Hugo's website.](https://gohugo.io/templates/partials/)\n\nStill having problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n\n## Language Support\n[CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) comes out of the box with Quartz.\n\nWant to support languages that read from right-to-left (like Arabic)? Hugo (and by proxy, Quartz) supports this natively.\n\nFollow the steps [Hugo provides here](https://gohugo.io/content-management/multilingual/#configure-languages) and modify your `config.toml`\n\nFor example:\n\n```toml\ndefaultContentLanguage = 'ar'\n[languages]\n  [languages.ar]\n    languagedirection = 'rtl'\n    title = 'ŸÖÿØŸàŸÜÿ™Ÿä'\n    weight = 1\n```\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/custom-Domain":{"title":"Custom Domain","content":"\n### Registrar\nThis step is only applicable if you are using a **custom domain**! If you are using a `\u003cYOUR-USERNAME\u003e.github.io` domain, you can skip this step.\n\nFor this last bit to take effect, you also need to create a CNAME record with the DNS provider you register your domain with (i.e. NameCheap, Google Domains).\n\nGitHub has some [documentation on this](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site), but the tldr; is to\n\n1. Go to your forked repository (`github.com/\u003cYOUR-GITHUB-USERNAME\u003e/quartz`) settings page and go to the Pages tab. Under \"Custom domain\", type your custom domain, then click **Save**.\n2. Go to your DNS Provider and create a CNAME record that points from your domain to `\u003cYOUR-GITHUB-USERNAME.github.io.` (yes, with the trailing period).\n\n\t![Example Configuration for Quartz](/notes/images/google-domains.png)*Example Configuration for Quartz*\n3. Wait 30 minutes to an hour for the network changes to kick in.\n4. Done!","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/editing":{"title":"Editing Content in Quartz","content":"\n## Editing \nQuartz runs on top of [Hugo](https://gohugo.io/) so all notes are written in [Markdown](https://www.markdownguide.org/getting-started/).\n\n### Folder Structure\nHere's a rough overview of what's what.\n\n**All content in your garden can found in the `/content` folder.** To make edits, you can open any of the files and make changes directly and save it. You can organize content into any folder you'd like.\n\n**To edit the main home page, open `/content/_index.md`.**\n\nTo create a link between notes in your garden, just create a normal link using Markdown pointing to the document in question. Please note that **all links should be relative to the root `/content` path**. \n\n```markdown\nFor example, I want to link this current document to `notes/config.md`.\n[A link to the config page](notes/config.md)\n```\n\nSimilarly, you can put local images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\nYou can also use wikilinks if that is what you are more comfortable with!\n\n### Front Matter\nHugo is picky when it comes to metadata for files. Make sure that your title is double-quoted and that you have a title defined at the top of your file like so. You can also add tags here as well.\n\n```yaml\n---\ntitle: \"Example Title\"\ntags:\n- example-tag\n---\n\nRest of your content here...\n```\n\n### Obsidian\nI recommend using [Obsidian](http://obsidian.md/) as a way to edit and grow your digital garden. It comes with a really nice editor and graphical interface to preview all of your local files.\n\nThis step is **highly recommended**.\n\n\u003e üîó Step 3: [How to setup your Obsidian Vault to work with Quartz](notes/obsidian.md)\n\n## Previewing Changes\nThis step is purely optional and mostly for those who want to see the published version of their digital garden locally before opening it up to the internet. This is *highly recommended* but not required.\n\n\u003e üëÄ Step 4: [Preview Quartz Changes](notes/preview%20changes.md)\n\nFor those who like to live life more on the edge, viewing the garden through Obsidian gets you pretty close to the real thing.\n\n## Publishing Changes\nNow that you know the basics of managing your digital garden using Quartz, you can publish it to the internet!\n\n\u003e üåç Step 5: [Hosting Quartz online!](notes/hosting.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/hosting":{"title":"Deploying Quartz to the Web","content":"\n## Hosting on GitHub Pages\nQuartz is designed to be effortless to deploy. If you forked and cloned Quartz directly from the repository, everything should already be good to go! Follow the steps below.\n\n### Enable GitHub Actions\nBy default, GitHub disables workflows from running automatically on Forked Repostories. Head to the 'Actions' tab of your forked repository and Enable Workflows to setup deploying your Quartz site!\n\n![Enable GitHub Actions](notes/images/github-actions.png)*Enable GitHub Actions*\n\n### Enable GitHub Pages\n\nHead to the 'Settings' tab of your forked repository and go to the 'Pages' tab.\n\n1. (IMPORTANT) Set the source to deploy from `master` (and not `hugo`) using `/ (root)`\n2. Set a custom domain here if you have one!\n\n![Enable GitHub Pages](/notes/images/github-pages.png)*Enable GitHub Pages*\n\n### Pushing Changes\nTo see your changes on the internet, we need to push it them to GitHub. Quartz is a `git` repository so updating it is the same workflow as you would follow as if it were just a regular software project.\n\n```shell\n# Navigate to Quartz folder\ncd \u003cpath-to-quartz\u003e\n\n# Commit all changes\ngit add .\ngit commit -m \"message describing changes\"\n\n# Push to GitHub to update site\ngit push origin hugo\n```\n\nNote: we specifically push to the `hugo` branch here. Our GitHub action automatically runs everytime a push to is detected to that branch and then updates the `master` branch for redeployment.\n\n### Setting up the Site\nNow let's get this site up and running. Never hosted a site before? No problem. Have a fancy custom domain you already own or want to subdomain your Quartz? That's easy too.\n\nHere, we take advantage of GitHub's free page hosting to deploy our site. Change `baseURL` in `/config.toml`. \n\nMake sure that your `baseURL` has a trailing `/`!\n\n[Reference `config.toml` here](https://github.com/jackyzha0/quartz/blob/hugo/config.toml)\n\n```toml\nbaseURL = \"https://\u003cYOUR-DOMAIN\u003e/\"\n```\n\nIf you are using this under a subdomain (e.g. `\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz`), include the trailing `/`. **You need to do this especially if you are using GitHub!**\n\n```toml\nbaseURL = \"https://\u003cYOUR-GITHUB-USERNAME\u003e.github.io/quartz/\"\n```\n\nChange `cname` in `/.github/workflows/deploy.yaml`. Again, if you don't have a custom domain to use, you can use `\u003cYOUR-USERNAME\u003e.github.io`.\n\nPlease note that the `cname` field should *not* have any path `e.g. end with /quartz` or have a trailing `/`.\n\n[Reference `deploy.yaml` here](https://github.com/jackyzha0/quartz/blob/hugo/.github/workflows/deploy.yaml)\n\n```yaml {title=\".github/workflows/deploy.yaml\"}\n- name: Deploy  \n  uses: peaceiris/actions-gh-pages@v3  \n  with:  \n\tgithub_token: ${{ secrets.GITHUB_TOKEN }} # this can stay as is, GitHub fills this in for us!\n\tpublish_dir: ./public  \n\tpublish_branch: master\n\tcname: \u003cYOUR-DOMAIN\u003e\n```\n\nHave a custom domain? [Learn how to set it up with Quartz ](notes/custom%20Domain.md).\n\n### Ignoring Files\nOnly want to publish a subset of all of your notes? Don't worry, Quartz makes this a simple two-step process.\n\n‚ùå [Excluding pages from being published](notes/ignore%20notes.md)\n\n---\n\nNow that your Quartz is live, let's figure out how to make Quartz really *yours*!\n\n\u003e Step 6: üé® [Customizing Quartz](notes/config.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/ignore-notes":{"title":"Ignoring Notes","content":"\n### Quartz Ignore\nEdit `ignoreFiles` in `config.toml` to include paths you'd like to exclude from being rendered.\n\n```toml\n...\nignoreFiles = [  \n    \"/content/templates/*\",  \n    \"/content/private/*\", \n    \"\u003cyour path here\u003e\"\n]\n```\n\n`ignoreFiles` supports the use of Regular Expressions (RegEx) so you can ignore patterns as well (e.g. ignoring all `.png`s by doing `\\\\.png$`).\nTo ignore a specific file, you can also add the tag `draft: true` to the frontmatter of a note.\n\n```markdown\n---\ntitle: Some Private Note\ndraft: true\n---\n...\n```\n\nMore details in [Hugo's documentation](https://gohugo.io/getting-started/configuration/#ignore-content-and-data-files-when-rendering).\n\n### Global Ignore\nHowever, just adding to the `ignoreFiles` will only prevent the page from being access through Quartz. If you want to prevent the file from being pushed to GitHub (for example if you have a public repository), you need to also add the path to the `.gitignore` file at the root of the repository.","lastmodified":"2022-08-05T13:12:43.693019218Z","tags":null},"/notes/obsidian":{"title":"Obsidian Vault Integration","content":"\n## Setup\nObsidian is the preferred way to use Quartz. You can either create a new Obsidian Vault or link one that your already have.\n\n### New Vault\nIf you don't have an existing Vault, [download Obsidian](https://obsidian.md/) and create a new Vault in the `/content` folder that you created and cloned during the [setup](notes/setup.md) step.\n\n### Linking an existing Vault\nThe easiest way to use an existing Vault is to copy all of your files (directory and hierarchies intact) into the `/content` folder.\n\n## Settings\nGreat, now that you have your Obsidian linked to your Quartz, let's fix some settings so that they play well.\n\n1. Under Options \u003e Files and Links, set the New link format to always use Absolute Path in Vault.\n2. Go to Settings \u003e Files \u0026 Links \u003e Turn \"on\" automatically update internal links.\n\n![Obsidian Settings](/notes/images/obsidian-settings.png)*Obsidian Settings*\n\n## Templates\nInserting front matter everytime you want to create a new Note gets annoying really quickly. Luckily, Obsidian supports templates which makes inserting new content really easily.\n\n**If you decide to overwrite the `/content` folder completely, don't remove the `/content/templates` folder!**\n\nHead over to Options \u003e Core Plugins and enable the Templates plugin. Then go to Options \u003e Hotkeys and set a hotkey for 'Insert Template' (I recommend `[cmd]+T`). That way, when you create a new note, you can just press the hotkey for a new template and be ready to go!\n\n\u003e üëÄ Step 4: [Preview Quartz Changes](notes/preview%20changes.md)","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/philosophy":{"title":"Quartz Philosophy","content":"\n\u003e ‚Äú[One] who works with the door open gets all kinds of interruptions, but [they] also occasionally gets clues as to what the world is and what might be important.‚Äù ‚Äî Richard Hamming\n\n## Why Quartz?\nHosting a public digital garden isn't easy. There are an overwhelming number of tutorials, resources, and guides for tools like [Notion](https://www.notion.so/), [Roam](https://roamresearch.com/), and [Obsidian](https://obsidian.md/), yet none of them have super easy to use *free* tools to publish that garden to the world.\n\nI've personally found that\n1. It's nice to access notes from anywhere\n2. Having a public digital garden invites open conversations\n3. It makes keeping personal notes and knowledge *playful and fun*\n\nI was really inspired by [Bianca](https://garden.bianca.digital/) and [Joel](https://joelhooks.com/digital-garden)'s digital gardens and wanted to try making my own.\n\n**The goal of Quartz is to make hosting your own public digital garden free and simple.** You don't even need your own website. Quartz does all of that for you and gives your own little corner of the internet.\n","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/preview-changes":{"title":"Preview Changes","content":"\nIf you'd like to preview what your Quartz site looks like before deploying it to the internet, here's exactly how to do that!\n\nNote that both of these steps need to be completed.\n\n## Install `hugo-obsidian`\nThis step will generate the list of backlinks for Hugo to parse. Ensure you have [Go](https://golang.org/doc/install) (\u003e= 1.16) installed.\n\n```bash\n# Install and link `hugo-obsidian` locally\ngo install github.com/jackyzha0/hugo-obsidian@latest\n```\n\nIf you are running into an error saying that `command not found: hugo-obsidian`, make sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize hugo-obsidian as an executable.\n\nAfterwards, start the Hugo server as shown above and your local backlinks and interactive graph should be populated!\n\n##  Installing Hugo\nHugo is the static site generator that powers Quartz. [Install Hugo with \"extended\" Sass/SCSS version](https://gohugo.io/getting-started/installing/) first. Then,\n\n```bash\n# Navigate to your local Quartz folder\ncd \u003clocation-of-your-local-quartz\u003e\n\n# Start local server\nmake serve\n\n# View your site in a browser at http://localhost:1313/\n```\n\n\u003e üåç Step 5: [Hosting Quartz online!](notes/hosting.md)","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/search":{"title":"Search","content":"\nQuartz supports two modes of searching through content.\n\n## Full-text\nFull-text search is the default in Quartz. It produces results that *exactly* match the search query. This is easier to setup but usually produces lower quality matches.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: false\n```\n\n## Natural Language\nNatural language search is powered by [Operand](https://operand.ai/). It understands language like a person does and finds results that best match user intent. In this sense, it is closer to how Google Search works.\n\nNatural language search tends to produce higher quality results than full-text search.\n\nHere's how to set it up.\n\n1. Create an Operand Account on [their website](https://operand.ai/).\n2. Go to Dashboard \u003e Settings \u003e Integrations.\n3. Follow the steps to setup the GitHub integration. Operand needs access to GitHub in order to index your digital garden properly!\n4. Head over to Dashboard \u003e Objects and press `(Cmd + K)` to open the omnibar and select 'Create Collection'.\n\t1. Set the 'Collection Label' to something that will help you remember it.\n\t2. You can leave the 'Parent Collection' field empty.\n5. Click into your newly made Collection.\n\t1. Press the 'share' button that looks like three dots connected by lines.\n\t2. Set the 'Interface Type' to `object-search` and click 'Create'.\n\t3. This will bring you to a new page with a search bar. Ignore this for now.\n6. Go back to Dashboard \u003e Settings \u003e API Keys and find your Quartz-specific Operand API key under 'Other keys'.\n\t1. Copy the key (which looks something like `0e733a7f-9b9c-48c6-9691-b54fa1c8b910`).\n\t2. Open `data/config.yaml`. Set `enableSemanticSearch` to `true` and `operandApiKey` to your copied key.\n\n```yaml {title=\"data/config.yaml\"}\n# the default option\nenableSemanticSearch: true\noperandApiKey: \"0e733a7f-9b9c-48c6-9691-b54fa1c8b910\"\n```\n7. Make a commit and push your changes to GitHub. See the [[notes/hosting|hosting]] page if you haven't done this already.\n\t1. This step is *required* for Operand to be able to properly index your content. \n\t2. Head over to Dashboard \u003e Objects and select the collection that you made earlier\n8. Press `(Cmd + K)` to open the omnibar again and select 'Create GitHub Repo'\n\t1. Set the 'Repository Label' to `Quartz`\n\t2. Set the 'Repository Owner' to your GitHub username\n\t3. Set the 'Repository Ref' to `master`\n\t4. Set the 'Repository Name' to the name of your repository (usually just `quartz` if you forked the repository without changing the name)\n\t5. Leave 'Root Path' and 'Root URL' empty\n9. Wait for your repository to index and enjoy natural language search in Quartz! Operand refreshes the index every 2h so all you need to do is just push to GitHub to update the contents in the search.","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/setup":{"title":"Setup","content":"\n## Making your own Quartz\nSetting up Quartz requires a basic understanding of `git`. If you are unfamiliar, [this resource](https://resources.nwplus.io/2-beginner/how-to-git-github.html) is a great place to start!\n\n### Forking\n\u003e A fork is a copy of a repository. Forking a repository allows you to freely experiment with changes without affecting the original project.\n\nNavigate to the GitHub repository for the Quartz project:\n\nüìÅ [Quartz Repository](https://github.com/jackyzha0/quartz)\n\nThen, Fork the repository into your own GitHub account. If you don't have an account, you can make on for free [here](https://github.com/join). More details about forking a repo can be found on [GitHub's documentation](https://docs.github.com/en/get-started/quickstart/fork-a-repo).\n\n### Cloning\nAfter you've made a fork of the repository, you need to download the files locally onto your machine. Ensure you have `git`, then type the following command replacing `YOUR-USERNAME` with your GitHub username.\n\n```shell\ngit clone https://github.com/YOUR-USERNAME/quartz\n```\n\n## Editing\nGreat! Now you have everything you need to start editing and growing your digital garden. If you're ready to start writing content already, check out the recommended flow for editing notes in Quartz.\n\n\u003e ‚úèÔ∏è Step 2: [Editing Notes in Quartz](notes/editing.md)\n\nHaving problems? Checkout our [FAQ and Troubleshooting guide](notes/troubleshooting.md).\n","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/showcase":{"title":"Showcase","content":"\nWant to see what Quartz can do? Here are some cool community gardens :)\n\n- [Quartz Documentation (this site!)](https://quartz.jzhao.xyz/)\n- [Jacky Zhao's Garden](https://jzhao.xyz/)\n- [Scaling Synthesis - A hypertext research notebook](https://scalingsynthesis.com/)\n- [AWAGMI Intern Notes](https://notes.awagmi.xyz/)\n- [Shihyu's PKM](https://shihyuho.github.io/pkm/)\n- [Chloe's Garden](https://garden.chloeabrasada.online/)\n- [SlRvb's Site](https://slrvb.github.io/Site/)\n- [Course notes for Information Technology Advanced Theory](https://a2itnotes.github.io/quartz/)\n- [Brandon Boswell's Garden](https://brandonkboswell.com)\n- [Siyang's Courtyard](https://siyangsun.github.io/courtyard/)\n\nIf you want to see your own on here, submit a [Pull Request adding yourself to this file](https://github.com/jackyzha0/quartz/blob/hugo/content/notes/showcase.md)!\n","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/troubleshooting":{"title":"Troubleshooting and FAQ","content":"\nStill having trouble? Here are a list of common questions and problems people encounter when installing Quartz.\n\nWhile you're here, join our [Discord](https://discord.gg/cRFFHYye7t) :)\n\n### Does Quartz have Latex support?\nYes! See [CJK + Latex Support (ÊµãËØï)](notes/CJK%20+%20Latex%20Support%20(ÊµãËØï).md) for a brief demo.\n\n### Can I use \\\u003cObsidian Plugin\\\u003e in Quartz?\nUnless it produces direct Markdown output in the file, no. There currently is no way to bundle plugin code with Quartz.\n\nThe easiest way would be to add your own HTML partial that supports the functionality you are looking for.\n\n### My GitHub pages is just showing the README and not Quartz\nMake sure you set the source to deploy from `master` (and not `hugo`) using `/ (root)`! See more in the [hosting](/notes/hosting) guide\n\n### Some of my pages have 'January 1, 0001' as the last modified date\nThis is a problem caused by `git` treating files as case-insensitive by default and some of your posts probably have capitalized file names. You can turn this off in your Quartz by running this command.\n\n```shell\n# in the root of your Quartz (same folder as config.toml)\ngit config core.ignorecase true\n\n# or globally (not recommended)\ngit config --global core.ignorecase true\n```\n\n### Can I publish only a subset of my pages?\nYes! Quartz makes selective publishing really easy. Heres a guide on [excluding pages from being published](notes/ignore%20notes.md).\n\n### Can I host this myself and not on GitHub Pages?\nYes! All built files can be found under `/public` in the `master` branch. More details under [hosting](notes/hosting.md).\n\n### `command not found: hugo-obsidian`\nMake sure you set your `GOPATH` correctly! This will allow your terminal to correctly recognize `hugo-obsidian` as an executable.\n\n```shell\n# Add the following 2 lines to your ~/.bash_profile\nexport GOPATH=/Users/$USER/go\nexport PATH=$GOPATH/bin:$PATH\n\n# In your current terminal, to reload the session\nsource ~/.bash_profile\n```\n\n### How come my notes aren't being rendered?\nYou probably forgot to include front matter in your Markdown files. You can either setup [Obsidian](notes/obsidian.md) to do this for you or you need to manually define it. More details in [the 'how to edit' guide](notes/editing.md).\n\n### My custom domain isn't working!\nWalk through the steps in [the hosting guide](notes/hosting.md) again. Make sure you wait 30 min to 1 hour for changes to take effect.\n\n### How do I setup Google Analytics?\nYou can edit it in `config.toml` and either use a V3 (UA-) or V4 (G-) tag.\n\n### How do I change the content on the home page?\nTo edit the main home page, open `/content/_index.md`.\n\n### How do I change the colours?\nYou can change the theme by editing `assets/custom.scss`. More details on customization and themeing can be found in the [customization guide](notes/config.md).\n\n### How do I add images?\nYou can put images anywhere in the `/content` folder.\n\n```markdown\nExample image (source is in content/notes/images/example.png)\n![Example Image](/content/notes/images/example.png)\n```\n\n### My Interactive Graph and Backlinks aren't up to date\nBy default, the `linkIndex.json` (which Quartz needs to generate the Interactive Graph and Backlinks) are not regenerated locally. To set that up, see the guide on [local editing](notes/editing.md)\n\n### Can I use React/Vue/some other framework?\nNot out of the box. You could probably make it work by editing `/layouts/_default/single.html` but that's not what Quartz is designed to work with. 99% of things you are trying to do with those frameworks you can accomplish perfectly fine using just vanilla HTML/CSS/JS.\n\n## Still Stuck?\nQuartz isn't perfect! If you're still having troubles, file an issue in the GitHub repo with as much information as you can reasonably provide. Alternatively, you can message me on [Twitter](https://twitter.com/_jzhao) and I'll try to get back to you as soon as I can.\n\nüêõ [Submit an Issue](https://github.com/jackyzha0/quartz/issues)","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null},"/notes/updating":{"title":"Updating","content":"\nHaven't updated Quartz in a while and want all the cool new optimizations? On Unix/Mac systems you can run the following command for a one-line update! This command will show you a log summary of all commits since you last updated, press `q` to acknowledge this. Then, it will show you each change in turn and press `y` to accept the patch or `n` to reject it. Usually you should press `y` for most of these unless it conflicts with existing changes you've made! \n\n```shell\nmake update\n```\n\nOr, if you don't want the interactive parts and just want to force update your local garden (this assumed that you are okay with some of your personalizations been overriden!)\n\n```shell\nmake update-force\n```\n\nOr, manually checkout the changes yourself.\n\n\u003e [!warning] Warning!\n\u003e\n\u003e If you customized the files in `data/`, or anything inside `layouts/`, your customization may be overwritten!\n\u003e Make sure you have a copy of these changes if you don't want to lose them.\n\n\n```shell\n# add Quartz as a remote host\ngit remote add upstream git@github.com:jackyzha0/quartz.git\n\n# index and fetch changes\ngit fetch upstream\ngit checkout -p upstream/hugo -- layouts .github Makefile assets/js assets/styles/base.scss assets/styles/darkmode.scss config.toml data \n```\n","lastmodified":"2022-08-05T13:12:43.697019232Z","tags":null}}